<!DOCTYPE html>
<html><head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

        <title>raylib - cheatsheet</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

        <meta name="title" content="raylib - cheatsheet">
        <meta name="description" content="raylib is a simple and easy-to-use library to enjoy videogames programming. Don't miss latest functions added to raylib... check raylib cheatsheet">
        <meta name="keywords" content="raylib, videogames, programming, C, C++, library, learn, study, simple, easy, free, open source, raysan">
        <meta name="viewport" content="width=device-width">

        <!-- Open Graph metatags for sharing -->
        <meta property="og:title" content="raylib - cheatsheet">
        <meta property="og:image" content="https://www.raylib.com/common/img/raylib_logo_card.png">
        <meta property="og:url" content="https://www.raylib.com">
        <meta property="og:site_name" content="raylib">
        <meta property="og:description" content="Don't miss latest functions added to raylib... check raylib cheatsheet">

        <!-- hightlight.js - Syntax highlighting for the Web -->
        <link rel="stylesheet" href="raylib%20-%20cheatsheet_files/docco.min.css">
        <script src="raylib%20-%20cheatsheet_files/highlight.min.js"></script>

        <style type="text/css">
         @font-face {
             font-family: 'grixel_acme_7_wide_xtnd';
             src: url('../common/font/acme_7_wide_xtnd.eot');
             src: url('../common/font/acme_7_wide_xtnd.eot?#iefix') format('embedded-opentype'),
             url('../common/font/acme_7_wide_xtnd.woff') format('woff'),
             url('../common/font/acme_7_wide_xtnd.ttf') format('truetype');
             font-weight: normal;
             font-style: normal;
             font-size-adjust:0.49;
         }
         body{background-color:#f5f5f5;}

         .eximage img{margin: 0 auto; border: 1px solid; border-color: black; width:770px; height:auto;}
         p{font-family: grixel_acme_7_wide_xtnd, Courier New, Verdana, Arial; font-size:13px; line-height:24px;}
         a{font-family: grixel_acme_7_wide_xtnd, Courier New, Verdana, Arial; font-size:13px; line-height:24px;}
         pre code{font-family: Courier New; font-size:12px; width: auto!important; border: 1px solid; border-color:#b0b0b0; width:758px; height:auto; }
         .exdownbtn{
             width:250px; height:30px; float:left; position: relative; cursor:pointer; font-weight:bold; font-size:10px;
             line-height:30px; text-align: center; border-width:5px; background-color:#e1e1e1; color:#5c5a5a;
             border:4px solid #898888; font-family: grixel_acme_7_wide_xtnd, Courier New, Verdana, Arial;
         }
         .exdownbtn:hover{background-color:#f0d6d6; color:#c55757; border:4px solid #e66666;}
         #core pre code{border:10px solid; border-color:#888888; background-color:#dbdbe1; }
         #shapes pre code{border:10px solid; border-color:#e66666; background-color:#e9d0d6; }
         #textures pre code{border:10px solid; border-color:#75a06d; background-color:#c3e4bf; }
         #text pre code{border:10px solid; border-color:#52b296; background-color:#b9e9dd; }
         #models pre code{border:10px solid; border-color:#5d9cbd; background-color:#b9d6e8; }
         #audio pre code{border:10px solid; border-color:#d3b157; background-color:#e5d7ae; }
         #structs pre code{border:10px solid; border-color:#d2c9c6; background-color:#f8f8ff;}
         #colors pre code{border:10px solid; border-color:#c6d2c6; background-color:#e9f1f2;}

         #logo{width:128px; height:128px; float:left; position:relative; background-image:url(../common/img/raylib_logo.png);}
         #header{position:relative; height:110px; max-width: 1000px;}
         #title, #plinks, #version{position:relative; float:left; margin:0px; margin-left:10px; margin-top:10px;}
         #plinks{color: gray;}
         #plinks a, #copyright a{color: gray; text-decoration:none;}
         #plinks a:hover{color: black;}
         #version {margin-top: 23px; max-width:500px;}
         #pcore{margin-bottom:-12px; margin-left:12px; color:#5c5a5a;}
         #pshapes{margin-bottom:-12px; margin-left:12px; color:#c55757;}
         #ptextures{margin-bottom:-12px; margin-left:12px; color:#60815a;}
         #ptext{margin-bottom:-12px; margin-left:12px; color:#377764;}
         #pmodels{margin-bottom:-12px; margin-left:12px; color:#417794;}
         #paudio{margin-bottom:-12px; margin-left:12px; color:#8c7539;}
         #pstructs{margin-bottom:-12px; margin-left:12px; color:#bcbccd;}
         #pcolors{margin-bottom:-12px; margin-left:12px; color:#bcbccd;}

         #fullgroup{
             display: grid;
             grid-column-gap: 20px;
             grid-template-columns: auto auto;
         }

         #copyright p{color:#8b8b8b; font-size:10px}
         #copyright a:hover{color:black;}

         #downpdf{text-decoration: none;color:#aaaaaa;}
         #downpdf:hover{color:#444;}

         #fulldata p a {color:#0eefff; text-decoration: none;}

        /* for the tired programmers at night */
        .darkmode{background-color:#1e1e1e; color:#e1e1e1;}
        .darkmode a{color:#e1e1e1;}
        .darkmode #header{background-color:#1e1e1e; color:#e1e1e1;}
        .darkmode #title{color:#e1e1e1;}
        .darkmode #plinks{color:#e1e1e1;}
        .darkmode #plinks a{color:#e1e1e1;}
        .darkmode #plinks a:hover{color:#e1e1e1;}
        .darkmode #version{color:#e1e1e1;}
        .darkmode #pcore{color:#e1e1e1;}
        .darkmode #pshapes{color:#e1e1e1;}
        .darkmode #ptextures{color:#e1e1e1;}
        .darkmode #ptext{color:#e1e1e1;}
        .darkmode #pmodels{color:#e1e1e1;}
        .darkmode #paudio{color:#e1e1e1;}
        .darkmode #pstructs{color:#e1e1e1;}
        .darkmode #pcolors{color:#e1e1e1;}

         @media screen and (max-width: 1550px) {
            #fullgroup {
                grid-template-columns: auto;
            }

            .leftgroup, .rightgroup {
                overflow-x: auto;
            }
         }
        </style>

        <script type="text/javascript">
         document.addEventListener('DOMContentLoaded', function() {
            function addModule(url, targetSelector) {
                fetch(url)
                    .then(response => response.text())
                    .then(data => {
                        document.querySelector(targetSelector).innerHTML = data;
                        document.querySelectorAll(targetSelector).forEach(function(e) {
                            hljs.highlightBlock(e);
                        });
                    })
                    .catch(error => console.error('Could not get ' + url, error));
            }

            addModule('raylib_core.c', '#core pre code');
            addModule('raylib_shapes.c', '#shapes pre code');
            addModule('raylib_textures.c', '#textures pre code');
            addModule('raylib_text.c', '#text pre code');
            addModule('raylib_models.c', '#models pre code');
            addModule('raylib_audio.c', '#audio pre code');
            addModule('raylib_colors.c', '#colors pre code');
            addModule('raylib_structs.c', '#structs pre code');
        });

        function toggleDarkMode() {
            document.body.classList.toggle("darkmode");
        }

        </script>
    </head>

    <body class="vsc-initialized">
        <div id="header">
            <a id="logo" href="https://www.raylib.com/index.html"></a>
            <p id="title">A simple and easy-to-use library to enjoy videogames programming</p>
            <p id="plinks">[<a href="https://discord.gg/raylib">raylib Discord server</a>][<a href="https://github.com/raysan5/raylib">github.com/raysan5/raylib</a>][<a href="https://github.com/raysan5/raylib/blob/master/src/raylib.h">raylib.h</a>]</p>
            <p></p>
            <p id="version">v5.5 quick reference card  [<a id="downpdf" href="https://www.raylib.com/cheatsheet/raylib_cheatsheet_v5.5.pdf">download as PDF</a>]</p>
        </div>
        <br>
        <p>Chinese Translation: <a href="https://www.raylib.com/cheatsheet/cheatsheet_zh.html">以下为raylib所有API接口中文释义</a></p>
        <div id="fulldata">
            <p id="pcore">module: rcore <a href="#pcore">→</a></p>
            <div id="core"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Window-related functions</span>
    <span class="hljs-keyword">void</span> InitWindow(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *title);  <span class="hljs-comment">// Initialize window and OpenGL context</span>
    <span class="hljs-keyword">void</span> CloseWindow(<span class="hljs-keyword">void</span>);                                     <span class="hljs-comment">// Close window and unload OpenGL context</span>
    <span class="hljs-keyword">bool</span> WindowShouldClose(<span class="hljs-keyword">void</span>);                               <span class="hljs-comment">// Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)</span>
    <span class="hljs-keyword">bool</span> IsWindowReady(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Check if window has been initialized successfully</span>
    <span class="hljs-keyword">bool</span> IsWindowFullscreen(<span class="hljs-keyword">void</span>);                              <span class="hljs-comment">// Check if window is currently fullscreen</span>
    <span class="hljs-keyword">bool</span> IsWindowHidden(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Check if window is currently hidden</span>
    <span class="hljs-keyword">bool</span> IsWindowMinimized(<span class="hljs-keyword">void</span>);                               <span class="hljs-comment">// Check if window is currently minimized</span>
    <span class="hljs-keyword">bool</span> IsWindowMaximized(<span class="hljs-keyword">void</span>);                               <span class="hljs-comment">// Check if window is currently maximized</span>
    <span class="hljs-keyword">bool</span> IsWindowFocused(<span class="hljs-keyword">void</span>);                                 <span class="hljs-comment">// Check if window is currently focused</span>
    <span class="hljs-keyword">bool</span> IsWindowResized(<span class="hljs-keyword">void</span>);                                 <span class="hljs-comment">// Check if window has been resized last frame</span>
    <span class="hljs-keyword">bool</span> IsWindowState(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flag);                      <span class="hljs-comment">// Check if one specific window flag is enabled</span>
    <span class="hljs-keyword">void</span> SetWindowState(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flags);                    <span class="hljs-comment">// Set window configuration state using flags</span>
    <span class="hljs-keyword">void</span> ClearWindowState(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flags);                  <span class="hljs-comment">// Clear window configuration state flags</span>
    <span class="hljs-keyword">void</span> ToggleFullscreen(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Toggle window state: fullscreen/windowed, resizes monitor to match window resolution</span>
    <span class="hljs-keyword">void</span> ToggleBorderlessWindowed(<span class="hljs-keyword">void</span>);                        <span class="hljs-comment">// Toggle window state: borderless windowed, resizes window to match monitor resolution</span>
    <span class="hljs-keyword">void</span> MaximizeWindow(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Set window state: maximized, if resizable</span>
    <span class="hljs-keyword">void</span> MinimizeWindow(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Set window state: minimized, if resizable</span>
    <span class="hljs-keyword">void</span> RestoreWindow(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Set window state: not minimized/maximized</span>
    <span class="hljs-keyword">void</span> SetWindowIcon(Image image);                            <span class="hljs-comment">// Set icon for window (single image, RGBA 32bit)</span>
    <span class="hljs-keyword">void</span> SetWindowIcons(Image *images, <span class="hljs-keyword">int</span> count);              <span class="hljs-comment">// Set icon for window (multiple images, RGBA 32bit)</span>
    <span class="hljs-keyword">void</span> SetWindowTitle(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *title);                     <span class="hljs-comment">// Set title for window</span>
    <span class="hljs-keyword">void</span> SetWindowPosition(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y);                       <span class="hljs-comment">// Set window position on screen</span>
    <span class="hljs-keyword">void</span> SetWindowMonitor(<span class="hljs-keyword">int</span> monitor);                         <span class="hljs-comment">// Set monitor for the current window</span>
    <span class="hljs-keyword">void</span> SetWindowMinSize(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height);               <span class="hljs-comment">// Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)</span>
    <span class="hljs-keyword">void</span> SetWindowMaxSize(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height);               <span class="hljs-comment">// Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)</span>
    <span class="hljs-keyword">void</span> SetWindowSize(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height);                  <span class="hljs-comment">// Set window dimensions</span>
    <span class="hljs-keyword">void</span> SetWindowOpacity(<span class="hljs-keyword">float</span> opacity);                       <span class="hljs-comment">// Set window opacity [0.0f..1.0f]</span>
    <span class="hljs-keyword">void</span> SetWindowFocused(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Set window focused</span>
    <span class="hljs-keyword">void</span> *GetWindowHandle(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Get native window handle</span>
    <span class="hljs-keyword">int</span> GetScreenWidth(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Get current screen width</span>
    <span class="hljs-keyword">int</span> GetScreenHeight(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Get current screen height</span>
    <span class="hljs-keyword">int</span> GetRenderWidth(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Get current render width (it considers HiDPI)</span>
    <span class="hljs-keyword">int</span> GetRenderHeight(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Get current render height (it considers HiDPI)</span>
    <span class="hljs-keyword">int</span> GetMonitorCount(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Get number of connected monitors</span>
    <span class="hljs-keyword">int</span> GetCurrentMonitor(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Get current monitor where window is placed</span>
    Vector2 GetMonitorPosition(<span class="hljs-keyword">int</span> monitor);                    <span class="hljs-comment">// Get specified monitor position</span>
    <span class="hljs-keyword">int</span> GetMonitorWidth(<span class="hljs-keyword">int</span> monitor);                           <span class="hljs-comment">// Get specified monitor width (current video mode used by monitor)</span>
    <span class="hljs-keyword">int</span> GetMonitorHeight(<span class="hljs-keyword">int</span> monitor);                          <span class="hljs-comment">// Get specified monitor height (current video mode used by monitor)</span>
    <span class="hljs-keyword">int</span> GetMonitorPhysicalWidth(<span class="hljs-keyword">int</span> monitor);                   <span class="hljs-comment">// Get specified monitor physical width in millimetres</span>
    <span class="hljs-keyword">int</span> GetMonitorPhysicalHeight(<span class="hljs-keyword">int</span> monitor);                  <span class="hljs-comment">// Get specified monitor physical height in millimetres</span>
    <span class="hljs-keyword">int</span> GetMonitorRefreshRate(<span class="hljs-keyword">int</span> monitor);                     <span class="hljs-comment">// Get specified monitor refresh rate</span>
    Vector2 GetWindowPosition(<span class="hljs-keyword">void</span>);                            <span class="hljs-comment">// Get window position XY on monitor</span>
    Vector2 GetWindowScaleDPI(<span class="hljs-keyword">void</span>);                            <span class="hljs-comment">// Get window scale DPI factor</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetMonitorName(<span class="hljs-keyword">int</span> monitor);                    <span class="hljs-comment">// Get the human-readable, UTF-8 encoded name of the specified monitor</span>
    <span class="hljs-keyword">void</span> SetClipboardText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                    <span class="hljs-comment">// Set clipboard text content</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetClipboardText(<span class="hljs-keyword">void</span>);                         <span class="hljs-comment">// Get clipboard text content</span>
    Image GetClipboardImage(<span class="hljs-keyword">void</span>);                              <span class="hljs-comment">// Get clipboard image</span>
    <span class="hljs-keyword">void</span> EnableEventWaiting(<span class="hljs-keyword">void</span>);                              <span class="hljs-comment">// Enable waiting for events on EndDrawing(), no automatic event polling</span>
    <span class="hljs-keyword">void</span> DisableEventWaiting(<span class="hljs-keyword">void</span>);                             <span class="hljs-comment">// Disable waiting for events on EndDrawing(), automatic events polling</span>

    <span class="hljs-comment">// Cursor-related functions</span>
    <span class="hljs-keyword">void</span> ShowCursor(<span class="hljs-keyword">void</span>);                                      <span class="hljs-comment">// Shows cursor</span>
    <span class="hljs-keyword">void</span> HideCursor(<span class="hljs-keyword">void</span>);                                      <span class="hljs-comment">// Hides cursor</span>
    <span class="hljs-keyword">bool</span> IsCursorHidden(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Check if cursor is not visible</span>
    <span class="hljs-keyword">void</span> EnableCursor(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Enables cursor (unlock cursor)</span>
    <span class="hljs-keyword">void</span> DisableCursor(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Disables cursor (lock cursor)</span>
    <span class="hljs-keyword">bool</span> IsCursorOnScreen(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Check if cursor is on the screen</span>

    <span class="hljs-comment">// Drawing-related functions</span>
    <span class="hljs-keyword">void</span> ClearBackground(Color color);                          <span class="hljs-comment">// Set background color (framebuffer clear color)</span>
    <span class="hljs-keyword">void</span> BeginDrawing(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Setup canvas (framebuffer) to start drawing</span>
    <span class="hljs-keyword">void</span> EndDrawing(<span class="hljs-keyword">void</span>);                                      <span class="hljs-comment">// End canvas drawing and swap buffers (double buffering)</span>
    <span class="hljs-keyword">void</span> BeginMode2D(Camera2D camera);                          <span class="hljs-comment">// Begin 2D mode with custom camera (2D)</span>
    <span class="hljs-keyword">void</span> EndMode2D(<span class="hljs-keyword">void</span>);                                       <span class="hljs-comment">// Ends 2D mode with custom camera</span>
    <span class="hljs-keyword">void</span> BeginMode3D(Camera3D camera);                          <span class="hljs-comment">// Begin 3D mode with custom camera (3D)</span>
    <span class="hljs-keyword">void</span> EndMode3D(<span class="hljs-keyword">void</span>);                                       <span class="hljs-comment">// Ends 3D mode and returns to default 2D orthographic mode</span>
    <span class="hljs-keyword">void</span> BeginTextureMode(RenderTexture2D target);              <span class="hljs-comment">// Begin drawing to render texture</span>
    <span class="hljs-keyword">void</span> EndTextureMode(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Ends drawing to render texture</span>
    <span class="hljs-keyword">void</span> BeginShaderMode(Shader shader);                        <span class="hljs-comment">// Begin custom shader drawing</span>
    <span class="hljs-keyword">void</span> EndShaderMode(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// End custom shader drawing (use default shader)</span>
    <span class="hljs-keyword">void</span> BeginBlendMode(<span class="hljs-keyword">int</span> mode);                              <span class="hljs-comment">// Begin blending mode (alpha, additive, multiplied, subtract, custom)</span>
    <span class="hljs-keyword">void</span> EndBlendMode(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// End blending mode (reset to default: alpha blending)</span>
    <span class="hljs-keyword">void</span> BeginScissorMode(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height); <span class="hljs-comment">// Begin scissor mode (define screen area for following drawing)</span>
    <span class="hljs-keyword">void</span> EndScissorMode(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// End scissor mode</span>
    <span class="hljs-keyword">void</span> BeginVrStereoMode(VrStereoConfig config);              <span class="hljs-comment">// Begin stereo rendering (requires VR simulator)</span>
    <span class="hljs-keyword">void</span> EndVrStereoMode(<span class="hljs-keyword">void</span>);                                 <span class="hljs-comment">// End stereo rendering (requires VR simulator)</span>

    <span class="hljs-comment">// VR stereo config functions for VR simulator</span>
    VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);     <span class="hljs-comment">// Load VR stereo config for VR simulator device parameters</span>
    <span class="hljs-keyword">void</span> UnloadVrStereoConfig(VrStereoConfig config);           <span class="hljs-comment">// Unload VR stereo config</span>

    <span class="hljs-comment">// Shader management functions</span>
    <span class="hljs-comment">// NOTE: Shader functionality is not available on OpenGL 1.1</span>
    Shader LoadShader(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *vsFileName, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fsFileName);   <span class="hljs-comment">// Load shader from files and bind default locations</span>
    Shader LoadShaderFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *vsCode, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fsCode); <span class="hljs-comment">// Load shader from code strings and bind default locations</span>
    <span class="hljs-keyword">bool</span> IsShaderValid(Shader shader);                                   <span class="hljs-comment">// Check if a shader is valid (loaded on GPU)</span>
    <span class="hljs-keyword">int</span> GetShaderLocation(Shader shader, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *uniformName);       <span class="hljs-comment">// Get shader uniform location</span>
    <span class="hljs-keyword">int</span> GetShaderLocationAttrib(Shader shader, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *attribName);  <span class="hljs-comment">// Get shader attribute location</span>
    <span class="hljs-keyword">void</span> SetShaderValue(Shader shader, <span class="hljs-keyword">int</span> locIndex, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *value, <span class="hljs-keyword">int</span> uniformType);               <span class="hljs-comment">// Set shader uniform value</span>
    <span class="hljs-keyword">void</span> SetShaderValueV(Shader shader, <span class="hljs-keyword">int</span> locIndex, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *value, <span class="hljs-keyword">int</span> uniformType, <span class="hljs-keyword">int</span> count);   <span class="hljs-comment">// Set shader uniform value vector</span>
    <span class="hljs-keyword">void</span> SetShaderValueMatrix(Shader shader, <span class="hljs-keyword">int</span> locIndex, Matrix mat);         <span class="hljs-comment">// Set shader uniform value (matrix 4x4)</span>
    <span class="hljs-keyword">void</span> SetShaderValueTexture(Shader shader, <span class="hljs-keyword">int</span> locIndex, Texture2D texture); <span class="hljs-comment">// Set shader uniform value for texture (sampler2d)</span>
    <span class="hljs-keyword">void</span> UnloadShader(Shader shader);                                    <span class="hljs-comment">// Unload shader from GPU memory (VRAM)</span>

    <span class="hljs-comment">// Screen-space-related functions</span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GetMouseRay GetScreenToWorldRay     <span class="hljs-comment">// Compatibility hack for previous raylib versions</span></span>
    Ray GetScreenToWorldRay(Vector2 position, Camera camera);         <span class="hljs-comment">// Get a ray trace from screen position (i.e mouse)</span>
    Ray GetScreenToWorldRayEx(Vector2 position, Camera camera, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height); <span class="hljs-comment">// Get a ray trace from screen position (i.e mouse) in a viewport</span>
    Vector2 GetWorldToScreen(Vector3 position, Camera camera);        <span class="hljs-comment">// Get the screen space position for a 3d world space position</span>
    Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height); <span class="hljs-comment">// Get size position for a 3d world space position</span>
    Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);    <span class="hljs-comment">// Get the screen space position for a 2d camera world space position</span>
    Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);    <span class="hljs-comment">// Get the world space position for a 2d camera screen space position</span>
    Matrix GetCameraMatrix(Camera camera);                            <span class="hljs-comment">// Get camera transform matrix (view matrix)</span>
    Matrix GetCameraMatrix2D(Camera2D camera);                        <span class="hljs-comment">// Get camera 2d transform matrix</span>

    <span class="hljs-comment">// Timing-related functions</span>
    <span class="hljs-keyword">void</span> SetTargetFPS(<span class="hljs-keyword">int</span> fps);                                 <span class="hljs-comment">// Set target FPS (maximum)</span>
    <span class="hljs-keyword">float</span> GetFrameTime(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Get time in seconds for last frame drawn (delta time)</span>
    <span class="hljs-keyword">double</span> GetTime(<span class="hljs-keyword">void</span>);                                       <span class="hljs-comment">// Get elapsed time in seconds since InitWindow()</span>
    <span class="hljs-keyword">int</span> GetFPS(<span class="hljs-keyword">void</span>);                                           <span class="hljs-comment">// Get current FPS</span>

    <span class="hljs-comment">// Custom frame control functions</span>
    <span class="hljs-comment">// NOTE: Those functions are intended for advanced users that want full control over the frame processing</span>
    <span class="hljs-comment">// By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timing + PollInputEvents()</span>
    <span class="hljs-comment">// To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL</span>
    <span class="hljs-keyword">void</span> SwapScreenBuffer(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Swap back buffer with front buffer (screen drawing)</span>
    <span class="hljs-keyword">void</span> PollInputEvents(<span class="hljs-keyword">void</span>);                                 <span class="hljs-comment">// Register all input events</span>
    <span class="hljs-keyword">void</span> WaitTime(<span class="hljs-keyword">double</span> seconds);                              <span class="hljs-comment">// Wait for some time (halt program execution)</span>

    <span class="hljs-comment">// Random values generation functions</span>
    <span class="hljs-keyword">void</span> SetRandomSeed(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> seed);                      <span class="hljs-comment">// Set the seed for the random number generator</span>
    <span class="hljs-keyword">int</span> GetRandomValue(<span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max);                       <span class="hljs-comment">// Get a random value between min and max (both included)</span>
    <span class="hljs-keyword">int</span> *LoadRandomSequence(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count, <span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max); <span class="hljs-comment">// Load random values sequence, no values repeated</span>
    <span class="hljs-keyword">void</span> UnloadRandomSequence(<span class="hljs-keyword">int</span> *sequence);                   <span class="hljs-comment">// Unload random values sequence</span>

    <span class="hljs-comment">// Misc. functions</span>
    <span class="hljs-keyword">void</span> TakeScreenshot(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                  <span class="hljs-comment">// Takes a screenshot of current screen (filename extension defines format)</span>
    <span class="hljs-keyword">void</span> SetConfigFlags(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flags);                    <span class="hljs-comment">// Setup init configuration flags (view FLAGS)</span>
    <span class="hljs-keyword">void</span> OpenURL(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *url);                              <span class="hljs-comment">// Open URL with default system browser (if available)</span>

    <span class="hljs-comment">// NOTE: Following functions implemented in module [utils]</span>
    <span class="hljs-comment">//------------------------------------------------------------------</span>
    <span class="hljs-keyword">void</span> TraceLog(<span class="hljs-keyword">int</span> logLevel, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, ...);         <span class="hljs-comment">// Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)</span>
    <span class="hljs-keyword">void</span> SetTraceLogLevel(<span class="hljs-keyword">int</span> logLevel);                        <span class="hljs-comment">// Set the current threshold (minimum) log level</span>
    <span class="hljs-keyword">void</span> *MemAlloc(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> size);                          <span class="hljs-comment">// Internal memory allocator</span>
    <span class="hljs-keyword">void</span> *MemRealloc(<span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> size);             <span class="hljs-comment">// Internal memory reallocator</span>
    <span class="hljs-keyword">void</span> MemFree(<span class="hljs-keyword">void</span> *ptr);                                    <span class="hljs-comment">// Internal memory free</span>

    <span class="hljs-comment">// Set custom callbacks</span>
    <span class="hljs-comment">// WARNING: Callbacks setup is intended for advanced users</span>
    <span class="hljs-keyword">void</span> SetTraceLogCallback(TraceLogCallback callback);         <span class="hljs-comment">// Set custom trace log</span>
    <span class="hljs-keyword">void</span> SetLoadFileDataCallback(LoadFileDataCallback callback); <span class="hljs-comment">// Set custom file binary data loader</span>
    <span class="hljs-keyword">void</span> SetSaveFileDataCallback(SaveFileDataCallback callback); <span class="hljs-comment">// Set custom file binary data saver</span>
    <span class="hljs-keyword">void</span> SetLoadFileTextCallback(LoadFileTextCallback callback); <span class="hljs-comment">// Set custom file text data loader</span>
    <span class="hljs-keyword">void</span> SetSaveFileTextCallback(SaveFileTextCallback callback); <span class="hljs-comment">// Set custom file text data saver</span>

    <span class="hljs-comment">// Files management functions</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *LoadFileData(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> *dataSize); <span class="hljs-comment">// Load file data as byte array (read)</span>
    <span class="hljs-keyword">void</span> UnloadFileData(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data);                   <span class="hljs-comment">// Unload file data allocated by LoadFileData()</span>
    <span class="hljs-keyword">bool</span> SaveFileData(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">void</span> *data, <span class="hljs-keyword">int</span> dataSize); <span class="hljs-comment">// Save data to file from byte array (write), returns true on success</span>
    <span class="hljs-keyword">bool</span> ExportDataAsCode(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName); <span class="hljs-comment">// Export data to code (.h), returns true on success</span>
    <span class="hljs-keyword">char</span> *LoadFileText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                   <span class="hljs-comment">// Load text data from file (read), returns a '\0' terminated string</span>
    <span class="hljs-keyword">void</span> UnloadFileText(<span class="hljs-keyword">char</span> *text);                            <span class="hljs-comment">// Unload file text data allocated by LoadFileText()</span>
    <span class="hljs-keyword">bool</span> SaveFileText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">char</span> *text);        <span class="hljs-comment">// Save text data to file (write), string must be '\0' terminated, returns true on success</span>
    <span class="hljs-comment">//------------------------------------------------------------------</span>

    <span class="hljs-comment">// File system functions</span>
    <span class="hljs-keyword">bool</span> FileExists(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                      <span class="hljs-comment">// Check if file exists</span>
    <span class="hljs-keyword">bool</span> DirectoryExists(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dirPath);                  <span class="hljs-comment">// Check if a directory path exists</span>
    <span class="hljs-keyword">bool</span> IsFileExtension(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *ext); <span class="hljs-comment">// Check file extension (including point: .png, .wav)</span>
    <span class="hljs-keyword">int</span> GetFileLength(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                    <span class="hljs-comment">// Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetFileExtension(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);         <span class="hljs-comment">// Get pointer to extension for a filename string (includes dot: '.png')</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetFileName(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filePath);              <span class="hljs-comment">// Get pointer to filename for a path string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetFileNameWithoutExt(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filePath);    <span class="hljs-comment">// Get filename string without extension (uses static string)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetDirectoryPath(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filePath);         <span class="hljs-comment">// Get full path for a given fileName with path (uses static string)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetPrevDirectoryPath(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dirPath);      <span class="hljs-comment">// Get previous directory path for a given path (uses static string)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetWorkingDirectory(<span class="hljs-keyword">void</span>);                      <span class="hljs-comment">// Get current working directory (uses static string)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetApplicationDirectory(<span class="hljs-keyword">void</span>);                  <span class="hljs-comment">// Get the directory of the running application (uses static string)</span>
    <span class="hljs-keyword">int</span> MakeDirectory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dirPath);                     <span class="hljs-comment">// Create directories (including full path requested), returns 0 on success</span>
    <span class="hljs-keyword">bool</span> ChangeDirectory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dir);                      <span class="hljs-comment">// Change working directory, return true on success</span>
    <span class="hljs-keyword">bool</span> IsPathFile(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path);                          <span class="hljs-comment">// Check if a given path is a file or a directory</span>
    <span class="hljs-keyword">bool</span> IsFileNameValid(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                 <span class="hljs-comment">// Check if fileName is valid for the platform/OS</span>
    FilePathList LoadDirectoryFiles(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dirPath);       <span class="hljs-comment">// Load directory filepaths</span>
    FilePathList LoadDirectoryFilesEx(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *basePath, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filter, <span class="hljs-keyword">bool</span> scanSubdirs); <span class="hljs-comment">// Load directory filepaths with extension filtering and recursive directory scan. Use 'DIR' in the filter string to include directories in the result</span>
    <span class="hljs-keyword">void</span> UnloadDirectoryFiles(FilePathList files);              <span class="hljs-comment">// Unload filepaths</span>
    <span class="hljs-keyword">bool</span> IsFileDropped(<span class="hljs-keyword">void</span>);                                   <span class="hljs-comment">// Check if a file has been dropped into window</span>
    FilePathList LoadDroppedFiles(<span class="hljs-keyword">void</span>);                        <span class="hljs-comment">// Load dropped filepaths</span>
    <span class="hljs-keyword">void</span> UnloadDroppedFiles(FilePathList files);                <span class="hljs-comment">// Unload dropped filepaths</span>
    <span class="hljs-keyword">long</span> GetFileModTime(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                  <span class="hljs-comment">// Get file modification time (last write time)</span>

    <span class="hljs-comment">// Compression/Encoding functionality</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *CompressData(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> *compDataSize);        <span class="hljs-comment">// Compress data (DEFLATE algorithm), memory must be MemFree()</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *DecompressData(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *compData, <span class="hljs-keyword">int</span> compDataSize, <span class="hljs-keyword">int</span> *dataSize);  <span class="hljs-comment">// Decompress data (DEFLATE algorithm), memory must be MemFree()</span>
    <span class="hljs-keyword">char</span> *EncodeDataBase64(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> *outputSize);               <span class="hljs-comment">// Encode data to Base64 string, memory must be MemFree()</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *DecodeDataBase64(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> *outputSize);                    <span class="hljs-comment">// Decode Base64 string data, memory must be MemFree()</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ComputeCRC32(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize);     <span class="hljs-comment">// Compute CRC32 hash code</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *ComputeMD5(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize);      <span class="hljs-comment">// Compute MD5 hash code, returns static int[4] (16 bytes)</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> *ComputeSHA1(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize);      <span class="hljs-comment">// Compute SHA1 hash code, returns static int[5] (20 bytes)</span>


    <span class="hljs-comment">// Automation events functionality</span>
    AutomationEventList LoadAutomationEventList(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                <span class="hljs-comment">// Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS</span>
    <span class="hljs-keyword">void</span> UnloadAutomationEventList(AutomationEventList <span class="hljs-built_in">list</span>);                         <span class="hljs-comment">// Unload automation events list from file</span>
    <span class="hljs-keyword">bool</span> ExportAutomationEventList(AutomationEventList <span class="hljs-built_in">list</span>, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);   <span class="hljs-comment">// Export automation events list as text file</span>
    <span class="hljs-keyword">void</span> SetAutomationEventList(AutomationEventList *<span class="hljs-built_in">list</span>);                           <span class="hljs-comment">// Set automation event list to record to</span>
    <span class="hljs-keyword">void</span> SetAutomationEventBaseFrame(<span class="hljs-keyword">int</span> frame);                                      <span class="hljs-comment">// Set automation event internal base frame to start recording</span>
    <span class="hljs-keyword">void</span> StartAutomationEventRecording(<span class="hljs-keyword">void</span>);                                         <span class="hljs-comment">// Start recording automation events (AutomationEventList must be set)</span>
    <span class="hljs-keyword">void</span> StopAutomationEventRecording(<span class="hljs-keyword">void</span>);                                          <span class="hljs-comment">// Stop recording automation events</span>
    <span class="hljs-keyword">void</span> PlayAutomationEvent(AutomationEvent event);                                  <span class="hljs-comment">// Play a recorded automation event</span>

    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-comment">// Input Handling Functions (Module: core)</span>
    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>

    <span class="hljs-comment">// Input-related functions: keyboard</span>
    <span class="hljs-keyword">bool</span> IsKeyPressed(<span class="hljs-keyword">int</span> key);                             <span class="hljs-comment">// Check if a key has been pressed once</span>
    <span class="hljs-keyword">bool</span> IsKeyPressedRepeat(<span class="hljs-keyword">int</span> key);                       <span class="hljs-comment">// Check if a key has been pressed again</span>
    <span class="hljs-keyword">bool</span> IsKeyDown(<span class="hljs-keyword">int</span> key);                                <span class="hljs-comment">// Check if a key is being pressed</span>
    <span class="hljs-keyword">bool</span> IsKeyReleased(<span class="hljs-keyword">int</span> key);                            <span class="hljs-comment">// Check if a key has been released once</span>
    <span class="hljs-keyword">bool</span> IsKeyUp(<span class="hljs-keyword">int</span> key);                                  <span class="hljs-comment">// Check if a key is NOT being pressed</span>
    <span class="hljs-keyword">int</span> GetKeyPressed(<span class="hljs-keyword">void</span>);                                <span class="hljs-comment">// Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty</span>
    <span class="hljs-keyword">int</span> GetCharPressed(<span class="hljs-keyword">void</span>);                               <span class="hljs-comment">// Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty</span>
    <span class="hljs-keyword">void</span> SetExitKey(<span class="hljs-keyword">int</span> key);                               <span class="hljs-comment">// Set a custom key to exit program (default is ESC)</span>

    <span class="hljs-comment">// Input-related functions: gamepads</span>
    <span class="hljs-keyword">bool</span> IsGamepadAvailable(<span class="hljs-keyword">int</span> gamepad);                                        <span class="hljs-comment">// Check if a gamepad is available</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *GetGamepadName(<span class="hljs-keyword">int</span> gamepad);                                     <span class="hljs-comment">// Get gamepad internal name id</span>
    <span class="hljs-keyword">bool</span> IsGamepadButtonPressed(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">int</span> button);                        <span class="hljs-comment">// Check if a gamepad button has been pressed once</span>
    <span class="hljs-keyword">bool</span> IsGamepadButtonDown(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">int</span> button);                           <span class="hljs-comment">// Check if a gamepad button is being pressed</span>
    <span class="hljs-keyword">bool</span> IsGamepadButtonReleased(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">int</span> button);                       <span class="hljs-comment">// Check if a gamepad button has been released once</span>
    <span class="hljs-keyword">bool</span> IsGamepadButtonUp(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">int</span> button);                             <span class="hljs-comment">// Check if a gamepad button is NOT being pressed</span>
    <span class="hljs-keyword">int</span> GetGamepadButtonPressed(<span class="hljs-keyword">void</span>);                                           <span class="hljs-comment">// Get the last gamepad button pressed</span>
    <span class="hljs-keyword">int</span> GetGamepadAxisCount(<span class="hljs-keyword">int</span> gamepad);                                        <span class="hljs-comment">// Get gamepad axis count for a gamepad</span>
    <span class="hljs-keyword">float</span> GetGamepadAxisMovement(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">int</span> axis);                         <span class="hljs-comment">// Get axis movement value for a gamepad axis</span>
    <span class="hljs-keyword">int</span> SetGamepadMappings(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *mappings);                                <span class="hljs-comment">// Set internal gamepad mappings (SDL_GameControllerDB)</span>
    <span class="hljs-keyword">void</span> SetGamepadVibration(<span class="hljs-keyword">int</span> gamepad, <span class="hljs-keyword">float</span> leftMotor, <span class="hljs-keyword">float</span> rightMotor, <span class="hljs-keyword">float</span> duration); <span class="hljs-comment">// Set gamepad vibration for both motors (duration in seconds)</span>

    <span class="hljs-comment">// Input-related functions: mouse</span>
    <span class="hljs-keyword">bool</span> IsMouseButtonPressed(<span class="hljs-keyword">int</span> button);                  <span class="hljs-comment">// Check if a mouse button has been pressed once</span>
    <span class="hljs-keyword">bool</span> IsMouseButtonDown(<span class="hljs-keyword">int</span> button);                     <span class="hljs-comment">// Check if a mouse button is being pressed</span>
    <span class="hljs-keyword">bool</span> IsMouseButtonReleased(<span class="hljs-keyword">int</span> button);                 <span class="hljs-comment">// Check if a mouse button has been released once</span>
    <span class="hljs-keyword">bool</span> IsMouseButtonUp(<span class="hljs-keyword">int</span> button);                       <span class="hljs-comment">// Check if a mouse button is NOT being pressed</span>
    <span class="hljs-keyword">int</span> GetMouseX(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Get mouse position X</span>
    <span class="hljs-keyword">int</span> GetMouseY(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Get mouse position Y</span>
    Vector2 GetMousePosition(<span class="hljs-keyword">void</span>);                         <span class="hljs-comment">// Get mouse position XY</span>
    Vector2 GetMouseDelta(<span class="hljs-keyword">void</span>);                            <span class="hljs-comment">// Get mouse delta between frames</span>
    <span class="hljs-keyword">void</span> SetMousePosition(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y);                    <span class="hljs-comment">// Set mouse position XY</span>
    <span class="hljs-keyword">void</span> SetMouseOffset(<span class="hljs-keyword">int</span> offsetX, <span class="hljs-keyword">int</span> offsetY);          <span class="hljs-comment">// Set mouse offset</span>
    <span class="hljs-keyword">void</span> SetMouseScale(<span class="hljs-keyword">float</span> scaleX, <span class="hljs-keyword">float</span> scaleY);         <span class="hljs-comment">// Set mouse scaling</span>
    <span class="hljs-keyword">float</span> GetMouseWheelMove(<span class="hljs-keyword">void</span>);                          <span class="hljs-comment">// Get mouse wheel movement for X or Y, whichever is larger</span>
    Vector2 GetMouseWheelMoveV(<span class="hljs-keyword">void</span>);                       <span class="hljs-comment">// Get mouse wheel movement for both X and Y</span>
    <span class="hljs-keyword">void</span> SetMouseCursor(<span class="hljs-keyword">int</span> cursor);                        <span class="hljs-comment">// Set mouse cursor</span>

    <span class="hljs-comment">// Input-related functions: touch</span>
    <span class="hljs-keyword">int</span> GetTouchX(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Get touch position X for touch point 0 (relative to screen size)</span>
    <span class="hljs-keyword">int</span> GetTouchY(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Get touch position Y for touch point 0 (relative to screen size)</span>
    Vector2 GetTouchPosition(<span class="hljs-keyword">int</span> index);                    <span class="hljs-comment">// Get touch position XY for a touch point index (relative to screen size)</span>
    <span class="hljs-keyword">int</span> GetTouchPointId(<span class="hljs-keyword">int</span> index);                         <span class="hljs-comment">// Get touch point identifier for given index</span>
    <span class="hljs-keyword">int</span> GetTouchPointCount(<span class="hljs-keyword">void</span>);                           <span class="hljs-comment">// Get number of touch points</span>

    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-comment">// Gestures and Touch Handling Functions (Module: rgestures)</span>
    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-keyword">void</span> SetGesturesEnabled(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> flags);      <span class="hljs-comment">// Enable a set of gestures using flags</span>
    <span class="hljs-keyword">bool</span> IsGestureDetected(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> gesture);     <span class="hljs-comment">// Check if a gesture have been detected</span>
    <span class="hljs-keyword">int</span> GetGestureDetected(<span class="hljs-keyword">void</span>);                     <span class="hljs-comment">// Get latest detected gesture</span>
    <span class="hljs-keyword">float</span> GetGestureHoldDuration(<span class="hljs-keyword">void</span>);               <span class="hljs-comment">// Get gesture hold time in seconds</span>
    Vector2 GetGestureDragVector(<span class="hljs-keyword">void</span>);               <span class="hljs-comment">// Get gesture drag vector</span>
    <span class="hljs-keyword">float</span> GetGestureDragAngle(<span class="hljs-keyword">void</span>);                  <span class="hljs-comment">// Get gesture drag angle</span>
    Vector2 GetGesturePinchVector(<span class="hljs-keyword">void</span>);              <span class="hljs-comment">// Get gesture pinch delta</span>
    <span class="hljs-keyword">float</span> GetGesturePinchAngle(<span class="hljs-keyword">void</span>);                 <span class="hljs-comment">// Get gesture pinch angle</span>

    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-comment">// Camera System Functions (Module: rcamera)</span>
    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-keyword">void</span> UpdateCamera(Camera *camera, <span class="hljs-keyword">int</span> mode);      <span class="hljs-comment">// Update camera position for selected mode</span>
    <span class="hljs-keyword">void</span> UpdateCameraPro(Camera *camera, Vector3 movement, Vector3 rotation, <span class="hljs-keyword">float</span> zoom); <span class="hljs-comment">// Update camera movement/rotation</span>

</code></pre></div>
            <p id="pshapes">module: rshapes <a href="#pshapes">→</a></p>
            <div id="shapes"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Set texture and rectangle to be used on shapes drawing</span>
    <span class="hljs-comment">// NOTE: It can be useful when using basic shapes and one single font,</span>
    <span class="hljs-comment">// defining a font char white rectangle would allow drawing everything in a single draw call</span>
    <span class="hljs-keyword">void</span> SetShapesTexture(Texture2D texture, Rectangle source);       <span class="hljs-comment">// Set texture and rectangle to be used on shapes drawing</span>
    Texture2D GetShapesTexture(<span class="hljs-keyword">void</span>);                                 <span class="hljs-comment">// Get texture that is used for shapes drawing</span>
    Rectangle GetShapesTextureRectangle(<span class="hljs-keyword">void</span>);                        <span class="hljs-comment">// Get texture source rectangle that is used for shapes drawing</span>

    <span class="hljs-comment">// Basic shapes drawing functions</span>
    <span class="hljs-keyword">void</span> DrawPixel(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, Color color);                                                   <span class="hljs-comment">// Draw a pixel using geometry [Can be slow, use with care]</span>
    <span class="hljs-keyword">void</span> DrawPixelV(Vector2 position, Color color);                                                    <span class="hljs-comment">// Draw a pixel using geometry (Vector version) [Can be slow, use with care]</span>
    <span class="hljs-keyword">void</span> DrawLine(<span class="hljs-keyword">int</span> startPosX, <span class="hljs-keyword">int</span> startPosY, <span class="hljs-keyword">int</span> endPosX, <span class="hljs-keyword">int</span> endPosY, Color color);                <span class="hljs-comment">// Draw a line</span>
    <span class="hljs-keyword">void</span> DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                                     <span class="hljs-comment">// Draw a line (using gl lines)</span>
    <span class="hljs-keyword">void</span> DrawLineEx(Vector2 startPos, Vector2 endPos, <span class="hljs-keyword">float</span> thick, Color color);                       <span class="hljs-comment">// Draw a line (using triangles/quads)</span>
    <span class="hljs-keyword">void</span> DrawLineStrip(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, Color color);                            <span class="hljs-comment">// Draw lines sequence (using gl lines)</span>
    <span class="hljs-keyword">void</span> DrawLineBezier(Vector2 startPos, Vector2 endPos, <span class="hljs-keyword">float</span> thick, Color color);                   <span class="hljs-comment">// Draw line segment cubic-bezier in-out interpolation</span>
    <span class="hljs-keyword">void</span> DrawCircle(<span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">float</span> radius, Color color);                              <span class="hljs-comment">// Draw a color-filled circle</span>
    <span class="hljs-keyword">void</span> DrawCircleSector(Vector2 center, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> startAngle, <span class="hljs-keyword">float</span> endAngle, <span class="hljs-keyword">int</span> segments, Color color);      <span class="hljs-comment">// Draw a piece of a circle</span>
    <span class="hljs-keyword">void</span> DrawCircleSectorLines(Vector2 center, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> startAngle, <span class="hljs-keyword">float</span> endAngle, <span class="hljs-keyword">int</span> segments, Color color); <span class="hljs-comment">// Draw circle sector outline</span>
    <span class="hljs-keyword">void</span> DrawCircleGradient(<span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">float</span> radius, Color inner, Color outer);         <span class="hljs-comment">// Draw a gradient-filled circle</span>
    <span class="hljs-keyword">void</span> DrawCircleV(Vector2 center, <span class="hljs-keyword">float</span> radius, Color color);                                       <span class="hljs-comment">// Draw a color-filled circle (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawCircleLines(<span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">float</span> radius, Color color);                         <span class="hljs-comment">// Draw circle outline</span>
    <span class="hljs-keyword">void</span> DrawCircleLinesV(Vector2 center, <span class="hljs-keyword">float</span> radius, Color color);                                  <span class="hljs-comment">// Draw circle outline (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawEllipse(<span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">float</span> radiusH, <span class="hljs-keyword">float</span> radiusV, Color color);             <span class="hljs-comment">// Draw ellipse</span>
    <span class="hljs-keyword">void</span> DrawEllipseLines(<span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">float</span> radiusH, <span class="hljs-keyword">float</span> radiusV, Color color);        <span class="hljs-comment">// Draw ellipse outline</span>
    <span class="hljs-keyword">void</span> DrawRing(Vector2 center, <span class="hljs-keyword">float</span> innerRadius, <span class="hljs-keyword">float</span> outerRadius, <span class="hljs-keyword">float</span> startAngle, <span class="hljs-keyword">float</span> endAngle, <span class="hljs-keyword">int</span> segments, Color color); <span class="hljs-comment">// Draw ring</span>
    <span class="hljs-keyword">void</span> DrawRingLines(Vector2 center, <span class="hljs-keyword">float</span> innerRadius, <span class="hljs-keyword">float</span> outerRadius, <span class="hljs-keyword">float</span> startAngle, <span class="hljs-keyword">float</span> endAngle, <span class="hljs-keyword">int</span> segments, Color color);    <span class="hljs-comment">// Draw ring outline</span>
    <span class="hljs-keyword">void</span> DrawRectangle(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color color);                        <span class="hljs-comment">// Draw a color-filled rectangle</span>
    <span class="hljs-keyword">void</span> DrawRectangleV(Vector2 position, Vector2 size, Color color);                                  <span class="hljs-comment">// Draw a color-filled rectangle (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawRectangleRec(Rectangle rec, Color color);                                                 <span class="hljs-comment">// Draw a color-filled rectangle</span>
    <span class="hljs-keyword">void</span> DrawRectanglePro(Rectangle rec, Vector2 origin, <span class="hljs-keyword">float</span> rotation, Color color);                 <span class="hljs-comment">// Draw a color-filled rectangle with pro parameters</span>
    <span class="hljs-keyword">void</span> DrawRectangleGradientV(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color top, Color bottom);   <span class="hljs-comment">// Draw a vertical-gradient-filled rectangle</span>
    <span class="hljs-keyword">void</span> DrawRectangleGradientH(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color left, Color right);   <span class="hljs-comment">// Draw a horizontal-gradient-filled rectangle</span>
    <span class="hljs-keyword">void</span> DrawRectangleGradientEx(Rectangle rec, Color topLeft, Color bottomLeft, Color topRight, Color bottomRight); <span class="hljs-comment">// Draw a gradient-filled rectangle with custom vertex colors</span>
    <span class="hljs-keyword">void</span> DrawRectangleLines(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color color);                   <span class="hljs-comment">// Draw rectangle outline</span>
    <span class="hljs-keyword">void</span> DrawRectangleLinesEx(Rectangle rec, <span class="hljs-keyword">float</span> lineThick, Color color);                            <span class="hljs-comment">// Draw rectangle outline with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawRectangleRounded(Rectangle rec, <span class="hljs-keyword">float</span> roundness, <span class="hljs-keyword">int</span> segments, Color color);              <span class="hljs-comment">// Draw rectangle with rounded edges</span>
    <span class="hljs-keyword">void</span> DrawRectangleRoundedLines(Rectangle rec, <span class="hljs-keyword">float</span> roundness, <span class="hljs-keyword">int</span> segments, Color color);         <span class="hljs-comment">// Draw rectangle lines with rounded edges</span>
    <span class="hljs-keyword">void</span> DrawRectangleRoundedLinesEx(Rectangle rec, <span class="hljs-keyword">float</span> roundness, <span class="hljs-keyword">int</span> segments, <span class="hljs-keyword">float</span> lineThick, Color color); <span class="hljs-comment">// Draw rectangle with rounded edges outline</span>
    <span class="hljs-keyword">void</span> DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                                <span class="hljs-comment">// Draw a color-filled triangle (vertex in counter-clockwise order!)</span>
    <span class="hljs-keyword">void</span> DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                           <span class="hljs-comment">// Draw triangle outline (vertex in counter-clockwise order!)</span>
    <span class="hljs-keyword">void</span> DrawTriangleFan(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, Color color);                          <span class="hljs-comment">// Draw a triangle fan defined by points (first vertex is the center)</span>
    <span class="hljs-keyword">void</span> DrawTriangleStrip(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, Color color);                        <span class="hljs-comment">// Draw a triangle strip defined by points</span>
    <span class="hljs-keyword">void</span> DrawPoly(Vector2 center, <span class="hljs-keyword">int</span> sides, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> rotation, Color color);               <span class="hljs-comment">// Draw a regular polygon (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawPolyLines(Vector2 center, <span class="hljs-keyword">int</span> sides, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> rotation, Color color);          <span class="hljs-comment">// Draw a polygon outline of n sides</span>
    <span class="hljs-keyword">void</span> DrawPolyLinesEx(Vector2 center, <span class="hljs-keyword">int</span> sides, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> rotation, <span class="hljs-keyword">float</span> lineThick, Color color); <span class="hljs-comment">// Draw a polygon outline of n sides with extended parameters</span>

    <span class="hljs-comment">// Splines drawing functions</span>
    <span class="hljs-keyword">void</span> DrawSplineLinear(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, <span class="hljs-keyword">float</span> thick, Color color);                  <span class="hljs-comment">// Draw spline: Linear, minimum 2 points</span>
    <span class="hljs-keyword">void</span> DrawSplineBasis(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, <span class="hljs-keyword">float</span> thick, Color color);                   <span class="hljs-comment">// Draw spline: B-Spline, minimum 4 points</span>
    <span class="hljs-keyword">void</span> DrawSplineCatmullRom(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, <span class="hljs-keyword">float</span> thick, Color color);              <span class="hljs-comment">// Draw spline: Catmull-Rom, minimum 4 points</span>
    <span class="hljs-keyword">void</span> DrawSplineBezierQuadratic(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, <span class="hljs-keyword">float</span> thick, Color color);         <span class="hljs-comment">// Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]</span>
    <span class="hljs-keyword">void</span> DrawSplineBezierCubic(<span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount, <span class="hljs-keyword">float</span> thick, Color color);             <span class="hljs-comment">// Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]</span>
    <span class="hljs-keyword">void</span> DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, <span class="hljs-keyword">float</span> thick, Color color);                    <span class="hljs-comment">// Draw spline segment: Linear, 2 points</span>
    <span class="hljs-keyword">void</span> DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, <span class="hljs-keyword">float</span> thick, Color color); <span class="hljs-comment">// Draw spline segment: B-Spline, 4 points</span>
    <span class="hljs-keyword">void</span> DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, <span class="hljs-keyword">float</span> thick, Color color); <span class="hljs-comment">// Draw spline segment: Catmull-Rom, 4 points</span>
    <span class="hljs-keyword">void</span> DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, <span class="hljs-keyword">float</span> thick, Color color); <span class="hljs-comment">// Draw spline segment: Quadratic Bezier, 2 points, 1 control point</span>
    <span class="hljs-keyword">void</span> DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, <span class="hljs-keyword">float</span> thick, Color color); <span class="hljs-comment">// Draw spline segment: Cubic Bezier, 2 points, 2 control points</span>

    <span class="hljs-comment">// Spline segment point evaluation functions, for a given t [0.0f .. 1.0f]</span>
    Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, <span class="hljs-keyword">float</span> t);                           <span class="hljs-comment">// Get (evaluate) spline point: Linear</span>
    Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, <span class="hljs-keyword">float</span> t);              <span class="hljs-comment">// Get (evaluate) spline point: B-Spline</span>
    Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, <span class="hljs-keyword">float</span> t);         <span class="hljs-comment">// Get (evaluate) spline point: Catmull-Rom</span>
    Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, <span class="hljs-keyword">float</span> t);                     <span class="hljs-comment">// Get (evaluate) spline point: Quadratic Bezier</span>
    Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, <span class="hljs-keyword">float</span> t);        <span class="hljs-comment">// Get (evaluate) spline point: Cubic Bezier</span>

    <span class="hljs-comment">// Basic shapes collision detection functions</span>
    <span class="hljs-keyword">bool</span> CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                           <span class="hljs-comment">// Check collision between two rectangles</span>
    <span class="hljs-keyword">bool</span> CheckCollisionCircles(Vector2 center1, <span class="hljs-keyword">float</span> radius1, Vector2 center2, <span class="hljs-keyword">float</span> radius2);        <span class="hljs-comment">// Check collision between two circles</span>
    <span class="hljs-keyword">bool</span> CheckCollisionCircleRec(Vector2 center, <span class="hljs-keyword">float</span> radius, Rectangle rec);                         <span class="hljs-comment">// Check collision between circle and rectangle</span>
    <span class="hljs-keyword">bool</span> CheckCollisionCircleLine(Vector2 center, <span class="hljs-keyword">float</span> radius, Vector2 p1, Vector2 p2);               <span class="hljs-comment">// Check if circle collides with a line created betweeen two points [p1] and [p2]</span>
    <span class="hljs-keyword">bool</span> CheckCollisionPointRec(Vector2 point, Rectangle rec);                                         <span class="hljs-comment">// Check if point is inside rectangle</span>
    <span class="hljs-keyword">bool</span> CheckCollisionPointCircle(Vector2 point, Vector2 center, <span class="hljs-keyword">float</span> radius);                       <span class="hljs-comment">// Check if point is inside circle</span>
    <span class="hljs-keyword">bool</span> CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);               <span class="hljs-comment">// Check if point is inside a triangle</span>
    <span class="hljs-keyword">bool</span> CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, <span class="hljs-keyword">int</span> threshold);                <span class="hljs-comment">// Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]</span>
    <span class="hljs-keyword">bool</span> CheckCollisionPointPoly(Vector2 point, <span class="hljs-keyword">const</span> Vector2 *points, <span class="hljs-keyword">int</span> pointCount);                <span class="hljs-comment">// Check if point is within a polygon described by array of vertices</span>
    <span class="hljs-keyword">bool</span> CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint); <span class="hljs-comment">// Check the collision between two lines defined by two points each, returns collision point by reference</span>
    Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                         <span class="hljs-comment">// Get collision rectangle for two rectangles collision</span>

</code></pre></div>
            <p id="ptextures">module: rtextures <a href="#ptextures">→</a></p>
            <div id="textures"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Image loading functions</span>
    <span class="hljs-comment">// NOTE: These functions do not require GPU access</span>
    Image LoadImage(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                                             <span class="hljs-comment">// Load image from file into CPU memory (RAM)</span>
    Image LoadImageRaw(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> format, <span class="hljs-keyword">int</span> headerSize);       <span class="hljs-comment">// Load image from RAW file data</span>
    Image LoadImageAnim(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> *frames);                                            <span class="hljs-comment">// Load image sequence from file (frames appended to image.data)</span>
    Image LoadImageAnimFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fileData, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> *frames); <span class="hljs-comment">// Load image sequence from memory buffer</span>
    Image LoadImageFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fileData, <span class="hljs-keyword">int</span> dataSize);      <span class="hljs-comment">// Load image from memory buffer, fileType refers to extension: i.e. '.png'</span>
    Image LoadImageFromTexture(Texture2D texture);                                                     <span class="hljs-comment">// Load image from GPU texture data</span>
    Image LoadImageFromScreen(<span class="hljs-keyword">void</span>);                                                                   <span class="hljs-comment">// Load image from screen buffer and (screenshot)</span>
    <span class="hljs-keyword">bool</span> IsImageValid(Image image);                                                                    <span class="hljs-comment">// Check if an image is valid (data and parameters)</span>
    <span class="hljs-keyword">void</span> UnloadImage(Image image);                                                                     <span class="hljs-comment">// Unload image from CPU memory (RAM)</span>
    <span class="hljs-keyword">bool</span> ExportImage(Image image, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                               <span class="hljs-comment">// Export image data to file, returns true on success</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *ExportImageToMemory(Image image, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">int</span> *fileSize);              <span class="hljs-comment">// Export image to memory buffer</span>
    <span class="hljs-keyword">bool</span> ExportImageAsCode(Image image, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                         <span class="hljs-comment">// Export image as code file defining an array of bytes, returns true on success</span>

    <span class="hljs-comment">// Image generation functions</span>
    Image GenImageColor(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color color);                                           <span class="hljs-comment">// Generate image: plain color</span>
    Image GenImageGradientLinear(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> direction, Color start, Color end);        <span class="hljs-comment">// Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient</span>
    Image GenImageGradientRadial(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">float</span> density, Color inner, Color outer);      <span class="hljs-comment">// Generate image: radial gradient</span>
    Image GenImageGradientSquare(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">float</span> density, Color inner, Color outer);      <span class="hljs-comment">// Generate image: square gradient</span>
    Image GenImageChecked(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> checksX, <span class="hljs-keyword">int</span> checksY, Color col1, Color col2);    <span class="hljs-comment">// Generate image: checked</span>
    Image GenImageWhiteNoise(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">float</span> factor);                                     <span class="hljs-comment">// Generate image: white noise</span>
    Image GenImagePerlinNoise(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> offsetX, <span class="hljs-keyword">int</span> offsetY, <span class="hljs-keyword">float</span> scale);           <span class="hljs-comment">// Generate image: perlin noise</span>
    Image GenImageCellular(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> tileSize);                                       <span class="hljs-comment">// Generate image: cellular algorithm, bigger tileSize means bigger cells</span>
    Image GenImageText(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                                       <span class="hljs-comment">// Generate image: grayscale image from text data</span>

    <span class="hljs-comment">// Image manipulation functions</span>
    Image ImageCopy(Image image);                                                                      <span class="hljs-comment">// Create an image duplicate (useful for transformations)</span>
    Image ImageFromImage(Image image, Rectangle rec);                                                  <span class="hljs-comment">// Create an image from another image piece</span>
    Image ImageFromChannel(Image image, <span class="hljs-keyword">int</span> selectedChannel);                                          <span class="hljs-comment">// Create an image from a selected channel of another image (GRAYSCALE)</span>
    Image ImageText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> fontSize, Color color);                                      <span class="hljs-comment">// Create an image from text (default font)</span>
    Image ImageTextEx(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing, Color tint);         <span class="hljs-comment">// Create an image from text (custom sprite font)</span>
    <span class="hljs-keyword">void</span> ImageFormat(Image *image, <span class="hljs-keyword">int</span> newFormat);                                                     <span class="hljs-comment">// Convert image data to desired format</span>
    <span class="hljs-keyword">void</span> ImageToPOT(Image *image, Color fill);                                                         <span class="hljs-comment">// Convert image to POT (power-of-two)</span>
    <span class="hljs-keyword">void</span> ImageCrop(Image *image, Rectangle crop);                                                      <span class="hljs-comment">// Crop an image to a defined rectangle</span>
    <span class="hljs-keyword">void</span> ImageAlphaCrop(Image *image, <span class="hljs-keyword">float</span> threshold);                                                <span class="hljs-comment">// Crop image depending on alpha value</span>
    <span class="hljs-keyword">void</span> ImageAlphaClear(Image *image, Color color, <span class="hljs-keyword">float</span> threshold);                                  <span class="hljs-comment">// Clear alpha channel to desired color</span>
    <span class="hljs-keyword">void</span> ImageAlphaMask(Image *image, Image alphaMask);                                                <span class="hljs-comment">// Apply alpha mask to image</span>
    <span class="hljs-keyword">void</span> ImageAlphaPremultiply(Image *image);                                                          <span class="hljs-comment">// Premultiply alpha channel</span>
    <span class="hljs-keyword">void</span> ImageBlurGaussian(Image *image, <span class="hljs-keyword">int</span> blurSize);                                                <span class="hljs-comment">// Apply Gaussian blur using a box blur approximation</span>
    <span class="hljs-keyword">void</span> ImageKernelConvolution(Image *image, <span class="hljs-keyword">const</span> <span class="hljs-keyword">float</span> *kernel, <span class="hljs-keyword">int</span> kernelSize);                    <span class="hljs-comment">// Apply custom square convolution kernel to image</span>
    <span class="hljs-keyword">void</span> ImageResize(Image *image, <span class="hljs-keyword">int</span> newWidth, <span class="hljs-keyword">int</span> newHeight);                                       <span class="hljs-comment">// Resize image (Bicubic scaling algorithm)</span>
    <span class="hljs-keyword">void</span> ImageResizeNN(Image *image, <span class="hljs-keyword">int</span> newWidth,<span class="hljs-keyword">int</span> newHeight);                                      <span class="hljs-comment">// Resize image (Nearest-Neighbor scaling algorithm)</span>
    <span class="hljs-keyword">void</span> ImageResizeCanvas(Image *image, <span class="hljs-keyword">int</span> newWidth, <span class="hljs-keyword">int</span> newHeight, <span class="hljs-keyword">int</span> offsetX, <span class="hljs-keyword">int</span> offsetY, Color fill); <span class="hljs-comment">// Resize canvas and fill with color</span>
    <span class="hljs-keyword">void</span> ImageMipmaps(Image *image);                                                                   <span class="hljs-comment">// Compute all mipmap levels for a provided image</span>
    <span class="hljs-keyword">void</span> ImageDither(Image *image, <span class="hljs-keyword">int</span> rBpp, <span class="hljs-keyword">int</span> gBpp, <span class="hljs-keyword">int</span> bBpp, <span class="hljs-keyword">int</span> aBpp);                            <span class="hljs-comment">// Dither image data to 16bpp or lower (Floyd-Steinberg dithering)</span>
    <span class="hljs-keyword">void</span> ImageFlipVertical(Image *image);                                                              <span class="hljs-comment">// Flip image vertically</span>
    <span class="hljs-keyword">void</span> ImageFlipHorizontal(Image *image);                                                            <span class="hljs-comment">// Flip image horizontally</span>
    <span class="hljs-keyword">void</span> ImageRotate(Image *image, <span class="hljs-keyword">int</span> degrees);                                                       <span class="hljs-comment">// Rotate image by input angle in degrees (-359 to 359)</span>
    <span class="hljs-keyword">void</span> ImageRotateCW(Image *image);                                                                  <span class="hljs-comment">// Rotate image clockwise 90deg</span>
    <span class="hljs-keyword">void</span> ImageRotateCCW(Image *image);                                                                 <span class="hljs-comment">// Rotate image counter-clockwise 90deg</span>
    <span class="hljs-keyword">void</span> ImageColorTint(Image *image, Color color);                                                    <span class="hljs-comment">// Modify image color: tint</span>
    <span class="hljs-keyword">void</span> ImageColorInvert(Image *image);                                                               <span class="hljs-comment">// Modify image color: invert</span>
    <span class="hljs-keyword">void</span> ImageColorGrayscale(Image *image);                                                            <span class="hljs-comment">// Modify image color: grayscale</span>
    <span class="hljs-keyword">void</span> ImageColorContrast(Image *image, <span class="hljs-keyword">float</span> contrast);                                             <span class="hljs-comment">// Modify image color: contrast (-100 to 100)</span>
    <span class="hljs-keyword">void</span> ImageColorBrightness(Image *image, <span class="hljs-keyword">int</span> brightness);                                           <span class="hljs-comment">// Modify image color: brightness (-255 to 255)</span>
    <span class="hljs-keyword">void</span> ImageColorReplace(Image *image, Color color, Color replace);                                  <span class="hljs-comment">// Modify image color: replace color</span>
    Color *LoadImageColors(Image image);                                                               <span class="hljs-comment">// Load color data from image as a Color array (RGBA - 32bit)</span>
    Color *LoadImagePalette(Image image, <span class="hljs-keyword">int</span> maxPaletteSize, <span class="hljs-keyword">int</span> *colorCount);                         <span class="hljs-comment">// Load colors palette from image as a Color array (RGBA - 32bit)</span>
    <span class="hljs-keyword">void</span> UnloadImageColors(Color *colors);                                                             <span class="hljs-comment">// Unload color data loaded with LoadImageColors()</span>
    <span class="hljs-keyword">void</span> UnloadImagePalette(Color *colors);                                                            <span class="hljs-comment">// Unload colors palette loaded with LoadImagePalette()</span>
    Rectangle GetImageAlphaBorder(Image image, <span class="hljs-keyword">float</span> threshold);                                       <span class="hljs-comment">// Get image alpha border rectangle</span>
    Color GetImageColor(Image image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y);                                                    <span class="hljs-comment">// Get image pixel color at (x, y) position</span>

    <span class="hljs-comment">// Image drawing functions</span>
    <span class="hljs-comment">// NOTE: Image software-rendering functions (CPU)</span>
    <span class="hljs-keyword">void</span> ImageClearBackground(Image *dst, Color color);                                                <span class="hljs-comment">// Clear image background with given color</span>
    <span class="hljs-keyword">void</span> ImageDrawPixel(Image *dst, <span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, Color color);                                  <span class="hljs-comment">// Draw pixel within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawPixelV(Image *dst, Vector2 position, Color color);                                   <span class="hljs-comment">// Draw pixel within an image (Vector version)</span>
    <span class="hljs-keyword">void</span> ImageDrawLine(Image *dst, <span class="hljs-keyword">int</span> startPosX, <span class="hljs-keyword">int</span> startPosY, <span class="hljs-keyword">int</span> endPosX, <span class="hljs-keyword">int</span> endPosY, Color color); <span class="hljs-comment">// Draw line within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color);                          <span class="hljs-comment">// Draw line within an image (Vector version)</span>
    <span class="hljs-keyword">void</span> ImageDrawLineEx(Image *dst, Vector2 start, Vector2 end, <span class="hljs-keyword">int</span> thick, Color color);              <span class="hljs-comment">// Draw a line defining thickness within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawCircle(Image *dst, <span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">int</span> radius, Color color);               <span class="hljs-comment">// Draw a filled circle within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawCircleV(Image *dst, Vector2 center, <span class="hljs-keyword">int</span> radius, Color color);                        <span class="hljs-comment">// Draw a filled circle within an image (Vector version)</span>
    <span class="hljs-keyword">void</span> ImageDrawCircleLines(Image *dst, <span class="hljs-keyword">int</span> centerX, <span class="hljs-keyword">int</span> centerY, <span class="hljs-keyword">int</span> radius, Color color);          <span class="hljs-comment">// Draw circle outline within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawCircleLinesV(Image *dst, Vector2 center, <span class="hljs-keyword">int</span> radius, Color color);                   <span class="hljs-comment">// Draw circle outline within an image (Vector version)</span>
    <span class="hljs-keyword">void</span> ImageDrawRectangle(Image *dst, <span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, Color color);       <span class="hljs-comment">// Draw rectangle within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color);                 <span class="hljs-comment">// Draw rectangle within an image (Vector version)</span>
    <span class="hljs-keyword">void</span> ImageDrawRectangleRec(Image *dst, Rectangle rec, Color color);                                <span class="hljs-comment">// Draw rectangle within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawRectangleLines(Image *dst, Rectangle rec, <span class="hljs-keyword">int</span> thick, Color color);                   <span class="hljs-comment">// Draw rectangle lines within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawTriangle(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color);               <span class="hljs-comment">// Draw triangle within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawTriangleEx(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color c1, Color c2, Color c3); <span class="hljs-comment">// Draw triangle with interpolated colors within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawTriangleLines(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color);          <span class="hljs-comment">// Draw triangle outline within an image</span>
    <span class="hljs-keyword">void</span> ImageDrawTriangleFan(Image *dst, Vector2 *points, <span class="hljs-keyword">int</span> pointCount, Color color);               <span class="hljs-comment">// Draw a triangle fan defined by points within an image (first vertex is the center)</span>
    <span class="hljs-keyword">void</span> ImageDrawTriangleStrip(Image *dst, Vector2 *points, <span class="hljs-keyword">int</span> pointCount, Color color);             <span class="hljs-comment">// Draw a triangle strip defined by points within an image</span>
    <span class="hljs-keyword">void</span> ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);             <span class="hljs-comment">// Draw a source image within a destination image (tint applied to source)</span>
    <span class="hljs-keyword">void</span> ImageDrawText(Image *dst, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> fontSize, Color color);   <span class="hljs-comment">// Draw text (using default font) within an image (destination)</span>
    <span class="hljs-keyword">void</span> ImageDrawTextEx(Image *dst, Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, Vector2 position, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing, Color tint); <span class="hljs-comment">// Draw text (custom sprite font) within an image (destination)</span>

    <span class="hljs-comment">// Texture loading functions</span>
    <span class="hljs-comment">// NOTE: These functions require GPU access</span>
    Texture2D LoadTexture(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                                       <span class="hljs-comment">// Load texture from file into GPU memory (VRAM)</span>
    Texture2D LoadTextureFromImage(Image image);                                                       <span class="hljs-comment">// Load texture from image data</span>
    TextureCubemap LoadTextureCubemap(Image image, <span class="hljs-keyword">int</span> layout);                                        <span class="hljs-comment">// Load cubemap from image, multiple image cubemap layouts supported</span>
    RenderTexture2D LoadRenderTexture(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height);                                          <span class="hljs-comment">// Load texture for rendering (framebuffer)</span>
    <span class="hljs-keyword">bool</span> IsTextureValid(Texture2D texture);                                                            <span class="hljs-comment">// Check if a texture is valid (loaded in GPU)</span>
    <span class="hljs-keyword">void</span> UnloadTexture(Texture2D texture);                                                             <span class="hljs-comment">// Unload texture from GPU memory (VRAM)</span>
    <span class="hljs-keyword">bool</span> IsRenderTextureValid(RenderTexture2D target);                                                 <span class="hljs-comment">// Check if a render texture is valid (loaded in GPU)</span>
    <span class="hljs-keyword">void</span> UnloadRenderTexture(RenderTexture2D target);                                                  <span class="hljs-comment">// Unload render texture from GPU memory (VRAM)</span>
    <span class="hljs-keyword">void</span> UpdateTexture(Texture2D texture, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *pixels);                                         <span class="hljs-comment">// Update GPU texture with new data</span>
    <span class="hljs-keyword">void</span> UpdateTextureRec(Texture2D texture, Rectangle rec, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *pixels);                       <span class="hljs-comment">// Update GPU texture rectangle with new data</span>

    <span class="hljs-comment">// Texture configuration functions</span>
    <span class="hljs-keyword">void</span> GenTextureMipmaps(Texture2D *texture);                                                        <span class="hljs-comment">// Generate GPU mipmaps for a texture</span>
    <span class="hljs-keyword">void</span> SetTextureFilter(Texture2D texture, <span class="hljs-keyword">int</span> filter);                                              <span class="hljs-comment">// Set texture scaling filter mode</span>
    <span class="hljs-keyword">void</span> SetTextureWrap(Texture2D texture, <span class="hljs-keyword">int</span> wrap);                                                  <span class="hljs-comment">// Set texture wrapping mode</span>

    <span class="hljs-comment">// Texture drawing functions</span>
    <span class="hljs-keyword">void</span> DrawTexture(Texture2D texture, <span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, Color tint);                               <span class="hljs-comment">// Draw a Texture2D</span>
    <span class="hljs-keyword">void</span> DrawTextureV(Texture2D texture, Vector2 position, Color tint);                                <span class="hljs-comment">// Draw a Texture2D with position defined as Vector2</span>
    <span class="hljs-keyword">void</span> DrawTextureEx(Texture2D texture, Vector2 position, <span class="hljs-keyword">float</span> rotation, <span class="hljs-keyword">float</span> scale, Color tint);  <span class="hljs-comment">// Draw a Texture2D with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);            <span class="hljs-comment">// Draw a part of a texture defined by a rectangle</span>
    <span class="hljs-keyword">void</span> DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, <span class="hljs-keyword">float</span> rotation, Color tint); <span class="hljs-comment">// Draw a part of a texture defined by a rectangle with 'pro' parameters</span>
    <span class="hljs-keyword">void</span> DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, <span class="hljs-keyword">float</span> rotation, Color tint); <span class="hljs-comment">// Draws a texture (or part of it) that stretches or shrinks nicely</span>

    <span class="hljs-comment">// Color/pixel related functions</span>
    <span class="hljs-keyword">bool</span> ColorIsEqual(Color col1, Color col2);                            <span class="hljs-comment">// Check if two colors are equal</span>
    Color Fade(Color color, <span class="hljs-keyword">float</span> alpha);                                 <span class="hljs-comment">// Get color with alpha applied, alpha goes from 0.0f to 1.0f</span>
    <span class="hljs-keyword">int</span> ColorToInt(Color color);                                          <span class="hljs-comment">// Get hexadecimal value for a Color (0xRRGGBBAA)</span>
    Vector4 ColorNormalize(Color color);                                  <span class="hljs-comment">// Get Color normalized as float [0..1]</span>
    Color ColorFromNormalized(Vector4 normalized);                        <span class="hljs-comment">// Get Color from normalized values [0..1]</span>
    Vector3 ColorToHSV(Color color);                                      <span class="hljs-comment">// Get HSV values for a Color, hue [0..360], saturation/value [0..1]</span>
    Color ColorFromHSV(<span class="hljs-keyword">float</span> hue, <span class="hljs-keyword">float</span> saturation, <span class="hljs-keyword">float</span> value);         <span class="hljs-comment">// Get a Color from HSV values, hue [0..360], saturation/value [0..1]</span>
    Color ColorTint(Color color, Color tint);                             <span class="hljs-comment">// Get color multiplied with another color</span>
    Color ColorBrightness(Color color, <span class="hljs-keyword">float</span> factor);                     <span class="hljs-comment">// Get color with brightness correction, brightness factor goes from -1.0f to 1.0f</span>
    Color ColorContrast(Color color, <span class="hljs-keyword">float</span> contrast);                     <span class="hljs-comment">// Get color with contrast correction, contrast values between -1.0f and 1.0f</span>
    Color ColorAlpha(Color color, <span class="hljs-keyword">float</span> alpha);                           <span class="hljs-comment">// Get color with alpha applied, alpha goes from 0.0f to 1.0f</span>
    Color ColorAlphaBlend(Color dst, Color src, Color tint);              <span class="hljs-comment">// Get src alpha-blended into dst color with tint</span>
    Color ColorLerp(Color color1, Color color2, <span class="hljs-keyword">float</span> factor);            <span class="hljs-comment">// Get color lerp interpolation between two colors, factor [0.0f..1.0f]</span>
    Color GetColor(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> hexValue);                                <span class="hljs-comment">// Get Color structure from hexadecimal value</span>
    Color GetPixelColor(<span class="hljs-keyword">void</span> *srcPtr, <span class="hljs-keyword">int</span> format);                        <span class="hljs-comment">// Get Color from a source pixel pointer of certain format</span>
    <span class="hljs-keyword">void</span> SetPixelColor(<span class="hljs-keyword">void</span> *dstPtr, Color color, <span class="hljs-keyword">int</span> format);            <span class="hljs-comment">// Set color formatted into destination pixel pointer</span>
    <span class="hljs-keyword">int</span> GetPixelDataSize(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> format);              <span class="hljs-comment">// Get pixel data size in bytes for certain format</span>

</code></pre></div>
            <p id="ptext">module: rtext <a href="#ptext">→</a></p>
            <div id="text"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Font loading/unloading functions</span>
    Font GetFontDefault(<span class="hljs-keyword">void</span>);                                                            <span class="hljs-comment">// Get the default Font</span>
    Font LoadFont(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                                  <span class="hljs-comment">// Load font from file into GPU memory (VRAM)</span>
    Font LoadFontEx(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> fontSize, <span class="hljs-keyword">int</span> *codepoints, <span class="hljs-keyword">int</span> codepointCount); <span class="hljs-comment">// Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set, font size is provided in pixels height</span>
    Font LoadFontFromImage(Image image, Color key, <span class="hljs-keyword">int</span> firstChar);                        <span class="hljs-comment">// Load font from Image (XNA style)</span>
    Font LoadFontFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fileData, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> fontSize, <span class="hljs-keyword">int</span> *codepoints, <span class="hljs-keyword">int</span> codepointCount); <span class="hljs-comment">// Load font from memory buffer, fileType refers to extension: i.e. '.ttf'</span>
    <span class="hljs-keyword">bool</span> IsFontValid(Font font);                                                          <span class="hljs-comment">// Check if a font is valid (font data loaded, WARNING: GPU texture not checked)</span>
    GlyphInfo *LoadFontData(<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fileData, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> fontSize, <span class="hljs-keyword">int</span> *codepoints, <span class="hljs-keyword">int</span> codepointCount, <span class="hljs-keyword">int</span> type); <span class="hljs-comment">// Load font data for further use</span>
    Image GenImageFontAtlas(<span class="hljs-keyword">const</span> GlyphInfo *glyphs, Rectangle **glyphRecs, <span class="hljs-keyword">int</span> glyphCount, <span class="hljs-keyword">int</span> fontSize, <span class="hljs-keyword">int</span> padding, <span class="hljs-keyword">int</span> packMethod); <span class="hljs-comment">// Generate image font atlas using chars info</span>
    <span class="hljs-keyword">void</span> UnloadFontData(GlyphInfo *glyphs, <span class="hljs-keyword">int</span> glyphCount);                               <span class="hljs-comment">// Unload font chars info data (RAM)</span>
    <span class="hljs-keyword">void</span> UnloadFont(Font font);                                                           <span class="hljs-comment">// Unload font from GPU memory (VRAM)</span>
    <span class="hljs-keyword">bool</span> ExportFontAsCode(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                               <span class="hljs-comment">// Export font as code file, returns true on success</span>

    <span class="hljs-comment">// Text drawing functions</span>
    <span class="hljs-keyword">void</span> DrawFPS(<span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY);                                                     <span class="hljs-comment">// Draw current FPS</span>
    <span class="hljs-keyword">void</span> DrawText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> posX, <span class="hljs-keyword">int</span> posY, <span class="hljs-keyword">int</span> fontSize, Color color);       <span class="hljs-comment">// Draw text (using default font)</span>
    <span class="hljs-keyword">void</span> DrawTextEx(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, Vector2 position, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing, Color tint); <span class="hljs-comment">// Draw text using font and additional parameters</span>
    <span class="hljs-keyword">void</span> DrawTextPro(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, Vector2 position, Vector2 origin, <span class="hljs-keyword">float</span> rotation, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing, Color tint); <span class="hljs-comment">// Draw text using Font and pro parameters (rotation)</span>
    <span class="hljs-keyword">void</span> DrawTextCodepoint(Font font, <span class="hljs-keyword">int</span> codepoint, Vector2 position, <span class="hljs-keyword">float</span> fontSize, Color tint); <span class="hljs-comment">// Draw one character (codepoint)</span>
    <span class="hljs-keyword">void</span> DrawTextCodepoints(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *codepoints, <span class="hljs-keyword">int</span> codepointCount, Vector2 position, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing, Color tint); <span class="hljs-comment">// Draw multiple character (codepoint)</span>

    <span class="hljs-comment">// Text font info functions</span>
    <span class="hljs-keyword">void</span> SetTextLineSpacing(<span class="hljs-keyword">int</span> spacing);                                                 <span class="hljs-comment">// Set vertical line spacing when drawing with line-breaks</span>
    <span class="hljs-keyword">int</span> MeasureText(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> fontSize);                                      <span class="hljs-comment">// Measure string width for default font</span>
    Vector2 MeasureTextEx(Font font, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">float</span> fontSize, <span class="hljs-keyword">float</span> spacing);    <span class="hljs-comment">// Measure string size for Font</span>
    <span class="hljs-keyword">int</span> GetGlyphIndex(Font font, <span class="hljs-keyword">int</span> codepoint);                                          <span class="hljs-comment">// Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found</span>
    GlyphInfo GetGlyphInfo(Font font, <span class="hljs-keyword">int</span> codepoint);                                     <span class="hljs-comment">// Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found</span>
    Rectangle GetGlyphAtlasRec(Font font, <span class="hljs-keyword">int</span> codepoint);                                 <span class="hljs-comment">// Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found</span>

    <span class="hljs-comment">// Text codepoints management functions (unicode characters)</span>
    <span class="hljs-keyword">char</span> *LoadUTF8(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *codepoints, <span class="hljs-keyword">int</span> length);                <span class="hljs-comment">// Load UTF-8 text encoded from codepoints array</span>
    <span class="hljs-keyword">void</span> UnloadUTF8(<span class="hljs-keyword">char</span> *text);                                      <span class="hljs-comment">// Unload UTF-8 text encoded from codepoints array</span>
    <span class="hljs-keyword">int</span> *LoadCodepoints(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> *count);                <span class="hljs-comment">// Load all codepoints from a UTF-8 text string, codepoints count returned by parameter</span>
    <span class="hljs-keyword">void</span> UnloadCodepoints(<span class="hljs-keyword">int</span> *codepoints);                           <span class="hljs-comment">// Unload codepoints data from memory</span>
    <span class="hljs-keyword">int</span> GetCodepointCount(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                          <span class="hljs-comment">// Get total number of codepoints in a UTF-8 encoded string</span>
    <span class="hljs-keyword">int</span> GetCodepoint(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> *codepointSize);           <span class="hljs-comment">// Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure</span>
    <span class="hljs-keyword">int</span> GetCodepointNext(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> *codepointSize);       <span class="hljs-comment">// Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure</span>
    <span class="hljs-keyword">int</span> GetCodepointPrevious(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> *codepointSize);   <span class="hljs-comment">// Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *CodepointToUTF8(<span class="hljs-keyword">int</span> codepoint, <span class="hljs-keyword">int</span> *utf8Size);        <span class="hljs-comment">// Encode one codepoint into UTF-8 byte array (array length returned as parameter)</span>

    <span class="hljs-comment">// Text strings management functions (no UTF-8 strings, only byte chars)</span>
    <span class="hljs-comment">// NOTE: Some strings allocate memory internally for returned strings, just be careful!</span>
    <span class="hljs-keyword">int</span> TextCopy(<span class="hljs-keyword">char</span> *dst, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *src);                                             <span class="hljs-comment">// Copy one string to another, returns bytes copied</span>
    <span class="hljs-keyword">bool</span> TextIsEqual(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text2);                               <span class="hljs-comment">// Check if two text string are equal</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> TextLength(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                                            <span class="hljs-comment">// Get text length, checks for '\0' ending</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextFormat(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, ...);                                        <span class="hljs-comment">// Text formatting with variables (sprintf() style)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextSubtext(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">int</span> length);                  <span class="hljs-comment">// Get a piece of a text string</span>
    <span class="hljs-keyword">char</span> *TextReplace(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *replace, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *by);             <span class="hljs-comment">// Replace text string (WARNING: memory must be freed!)</span>
    <span class="hljs-keyword">char</span> *TextInsert(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *insert, <span class="hljs-keyword">int</span> position);                 <span class="hljs-comment">// Insert text in a position (WARNING: memory must be freed!)</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextJoin(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **textList, <span class="hljs-keyword">int</span> count, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *delimiter);        <span class="hljs-comment">// Join text strings with delimiter</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **TextSplit(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">char</span> delimiter, <span class="hljs-keyword">int</span> *count);                 <span class="hljs-comment">// Split text into multiple strings</span>
    <span class="hljs-keyword">void</span> TextAppend(<span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *append, <span class="hljs-keyword">int</span> *position);                       <span class="hljs-comment">// Append text at specific position and move cursor!</span>
    <span class="hljs-keyword">int</span> TextFindIndex(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *find);                                <span class="hljs-comment">// Find first text occurrence within a string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextToUpper(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                      <span class="hljs-comment">// Get upper case version of provided string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextToLower(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                      <span class="hljs-comment">// Get lower case version of provided string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextToPascal(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                     <span class="hljs-comment">// Get Pascal case notation version of provided string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextToSnake(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                      <span class="hljs-comment">// Get Snake case notation version of provided string</span>
    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *TextToCamel(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                      <span class="hljs-comment">// Get Camel case notation version of provided string</span>

    <span class="hljs-keyword">int</span> TextToInteger(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                            <span class="hljs-comment">// Get integer value from text (negative values not supported)</span>
    <span class="hljs-keyword">float</span> TextToFloat(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *text);                            <span class="hljs-comment">// Get float value from text (negative values not supported)</span>

</code></pre></div>
            <p id="pmodels">module: rmodels <a href="#pmodels">→</a></p>
            <div id="models"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Basic geometric 3D shapes drawing functions</span>
    <span class="hljs-keyword">void</span> DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);                                    <span class="hljs-comment">// Draw a line in 3D world space</span>
    <span class="hljs-keyword">void</span> DrawPoint3D(Vector3 position, Color color);                                                   <span class="hljs-comment">// Draw a point in 3D space, actually a small line</span>
    <span class="hljs-keyword">void</span> DrawCircle3D(Vector3 center, <span class="hljs-keyword">float</span> radius, Vector3 rotationAxis, <span class="hljs-keyword">float</span> rotationAngle, Color color); <span class="hljs-comment">// Draw a circle in 3D world space</span>
    <span class="hljs-keyword">void</span> DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);                              <span class="hljs-comment">// Draw a color-filled triangle (vertex in counter-clockwise order!)</span>
    <span class="hljs-keyword">void</span> DrawTriangleStrip3D(<span class="hljs-keyword">const</span> Vector3 *points, <span class="hljs-keyword">int</span> pointCount, Color color);                      <span class="hljs-comment">// Draw a triangle strip defined by points</span>
    <span class="hljs-keyword">void</span> DrawCube(Vector3 position, <span class="hljs-keyword">float</span> width, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">float</span> length, Color color);             <span class="hljs-comment">// Draw cube</span>
    <span class="hljs-keyword">void</span> DrawCubeV(Vector3 position, Vector3 size, Color color);                                       <span class="hljs-comment">// Draw cube (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawCubeWires(Vector3 position, <span class="hljs-keyword">float</span> width, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">float</span> length, Color color);        <span class="hljs-comment">// Draw cube wires</span>
    <span class="hljs-keyword">void</span> DrawCubeWiresV(Vector3 position, Vector3 size, Color color);                                  <span class="hljs-comment">// Draw cube wires (Vector version)</span>
    <span class="hljs-keyword">void</span> DrawSphere(Vector3 centerPos, <span class="hljs-keyword">float</span> radius, Color color);                                     <span class="hljs-comment">// Draw sphere</span>
    <span class="hljs-keyword">void</span> DrawSphereEx(Vector3 centerPos, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> rings, <span class="hljs-keyword">int</span> slices, Color color);            <span class="hljs-comment">// Draw sphere with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawSphereWires(Vector3 centerPos, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> rings, <span class="hljs-keyword">int</span> slices, Color color);         <span class="hljs-comment">// Draw sphere wires</span>
    <span class="hljs-keyword">void</span> DrawCylinder(Vector3 position, <span class="hljs-keyword">float</span> radiusTop, <span class="hljs-keyword">float</span> radiusBottom, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">int</span> slices, Color color); <span class="hljs-comment">// Draw a cylinder/cone</span>
    <span class="hljs-keyword">void</span> DrawCylinderEx(Vector3 startPos, Vector3 endPos, <span class="hljs-keyword">float</span> startRadius, <span class="hljs-keyword">float</span> endRadius, <span class="hljs-keyword">int</span> sides, Color color); <span class="hljs-comment">// Draw a cylinder with base at startPos and top at endPos</span>
    <span class="hljs-keyword">void</span> DrawCylinderWires(Vector3 position, <span class="hljs-keyword">float</span> radiusTop, <span class="hljs-keyword">float</span> radiusBottom, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">int</span> slices, Color color); <span class="hljs-comment">// Draw a cylinder/cone wires</span>
    <span class="hljs-keyword">void</span> DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, <span class="hljs-keyword">float</span> startRadius, <span class="hljs-keyword">float</span> endRadius, <span class="hljs-keyword">int</span> sides, Color color); <span class="hljs-comment">// Draw a cylinder wires with base at startPos and top at endPos</span>
    <span class="hljs-keyword">void</span> DrawCapsule(Vector3 startPos, Vector3 endPos, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> slices, <span class="hljs-keyword">int</span> rings, Color color); <span class="hljs-comment">// Draw a capsule with the center of its sphere caps at startPos and endPos</span>
    <span class="hljs-keyword">void</span> DrawCapsuleWires(Vector3 startPos, Vector3 endPos, <span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> slices, <span class="hljs-keyword">int</span> rings, Color color); <span class="hljs-comment">// Draw capsule wireframe with the center of its sphere caps at startPos and endPos</span>
    <span class="hljs-keyword">void</span> DrawPlane(Vector3 centerPos, Vector2 size, Color color);                                      <span class="hljs-comment">// Draw a plane XZ</span>
    <span class="hljs-keyword">void</span> DrawRay(Ray ray, Color color);                                                                <span class="hljs-comment">// Draw a ray line</span>
    <span class="hljs-keyword">void</span> DrawGrid(<span class="hljs-keyword">int</span> slices, <span class="hljs-keyword">float</span> spacing);                                                          <span class="hljs-comment">// Draw a grid (centered at (0, 0, 0))</span>

    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>
    <span class="hljs-comment">// Model 3d Loading and Drawing Functions (Module: models)</span>
    <span class="hljs-comment">//------------------------------------------------------------------------------------</span>

    <span class="hljs-comment">// Model management functions</span>
    Model LoadModel(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                                <span class="hljs-comment">// Load model from files (meshes and materials)</span>
    Model LoadModelFromMesh(Mesh mesh);                                                   <span class="hljs-comment">// Load model from generated mesh (default material)</span>
    <span class="hljs-keyword">bool</span> IsModelValid(Model model);                                                       <span class="hljs-comment">// Check if a model is valid (loaded in GPU, VAO/VBOs)</span>
    <span class="hljs-keyword">void</span> UnloadModel(Model model);                                                        <span class="hljs-comment">// Unload model (including meshes) from memory (RAM and/or VRAM)</span>
    BoundingBox GetModelBoundingBox(Model model);                                         <span class="hljs-comment">// Compute model bounding box limits (considers all meshes)</span>

    <span class="hljs-comment">// Model drawing functions</span>
    <span class="hljs-keyword">void</span> DrawModel(Model model, Vector3 position, <span class="hljs-keyword">float</span> scale, Color tint);               <span class="hljs-comment">// Draw a model (with texture if set)</span>
    <span class="hljs-keyword">void</span> DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, <span class="hljs-keyword">float</span> rotationAngle, Vector3 scale, Color tint); <span class="hljs-comment">// Draw a model with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawModelWires(Model model, Vector3 position, <span class="hljs-keyword">float</span> scale, Color tint);          <span class="hljs-comment">// Draw a model wires (with texture if set)</span>
    <span class="hljs-keyword">void</span> DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, <span class="hljs-keyword">float</span> rotationAngle, Vector3 scale, Color tint); <span class="hljs-comment">// Draw a model wires (with texture if set) with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawModelPoints(Model model, Vector3 position, <span class="hljs-keyword">float</span> scale, Color tint); <span class="hljs-comment">// Draw a model as points</span>
    <span class="hljs-keyword">void</span> DrawModelPointsEx(Model model, Vector3 position, Vector3 rotationAxis, <span class="hljs-keyword">float</span> rotationAngle, Vector3 scale, Color tint); <span class="hljs-comment">// Draw a model as points with extended parameters</span>
    <span class="hljs-keyword">void</span> DrawBoundingBox(BoundingBox box, Color color);                                   <span class="hljs-comment">// Draw bounding box (wires)</span>
    <span class="hljs-keyword">void</span> DrawBillboard(Camera camera, Texture2D texture, Vector3 position, <span class="hljs-keyword">float</span> scale, Color tint);   <span class="hljs-comment">// Draw a billboard texture</span>
    <span class="hljs-keyword">void</span> DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint); <span class="hljs-comment">// Draw a billboard texture defined by source</span>
    <span class="hljs-keyword">void</span> DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, <span class="hljs-keyword">float</span> rotation, Color tint); <span class="hljs-comment">// Draw a billboard texture defined by source and rotation</span>

    <span class="hljs-comment">// Mesh management functions</span>
    <span class="hljs-keyword">void</span> UploadMesh(Mesh *mesh, <span class="hljs-keyword">bool</span> dynamic);                                            <span class="hljs-comment">// Upload mesh vertex data in GPU and provide VAO/VBO ids</span>
    <span class="hljs-keyword">void</span> UpdateMeshBuffer(Mesh mesh, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *data, <span class="hljs-keyword">int</span> dataSize, <span class="hljs-keyword">int</span> offset); <span class="hljs-comment">// Update mesh vertex data in GPU for a specific buffer index</span>
    <span class="hljs-keyword">void</span> UnloadMesh(Mesh mesh);                                                           <span class="hljs-comment">// Unload mesh data from CPU and GPU</span>
    <span class="hljs-keyword">void</span> DrawMesh(Mesh mesh, Material material, Matrix transform);                        <span class="hljs-comment">// Draw a 3d mesh with material and transform</span>
    <span class="hljs-keyword">void</span> DrawMeshInstanced(Mesh mesh, Material material, <span class="hljs-keyword">const</span> Matrix *transforms, <span class="hljs-keyword">int</span> instances); <span class="hljs-comment">// Draw multiple mesh instances with material and different transforms</span>
    BoundingBox GetMeshBoundingBox(Mesh mesh);                                            <span class="hljs-comment">// Compute mesh bounding box limits</span>
    <span class="hljs-keyword">void</span> GenMeshTangents(Mesh *mesh);                                                     <span class="hljs-comment">// Compute mesh tangents</span>
    <span class="hljs-keyword">bool</span> ExportMesh(Mesh mesh, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                                     <span class="hljs-comment">// Export mesh data to file, returns true on success</span>
    <span class="hljs-keyword">bool</span> ExportMeshAsCode(Mesh mesh, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                               <span class="hljs-comment">// Export mesh as code file (.h) defining multiple arrays of vertex attributes</span>

    <span class="hljs-comment">// Mesh generation functions</span>
    Mesh GenMeshPoly(<span class="hljs-keyword">int</span> sides, <span class="hljs-keyword">float</span> radius);                                            <span class="hljs-comment">// Generate polygonal mesh</span>
    Mesh GenMeshPlane(<span class="hljs-keyword">float</span> width, <span class="hljs-keyword">float</span> length, <span class="hljs-keyword">int</span> resX, <span class="hljs-keyword">int</span> resZ);                     <span class="hljs-comment">// Generate plane mesh (with subdivisions)</span>
    Mesh GenMeshCube(<span class="hljs-keyword">float</span> width, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">float</span> length);                            <span class="hljs-comment">// Generate cuboid mesh</span>
    Mesh GenMeshSphere(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> rings, <span class="hljs-keyword">int</span> slices);                              <span class="hljs-comment">// Generate sphere mesh (standard sphere)</span>
    Mesh GenMeshHemiSphere(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">int</span> rings, <span class="hljs-keyword">int</span> slices);                          <span class="hljs-comment">// Generate half-sphere mesh (no bottom cap)</span>
    Mesh GenMeshCylinder(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">int</span> slices);                         <span class="hljs-comment">// Generate cylinder mesh</span>
    Mesh GenMeshCone(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> height, <span class="hljs-keyword">int</span> slices);                             <span class="hljs-comment">// Generate cone/pyramid mesh</span>
    Mesh GenMeshTorus(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> size, <span class="hljs-keyword">int</span> radSeg, <span class="hljs-keyword">int</span> sides);                   <span class="hljs-comment">// Generate torus mesh</span>
    Mesh GenMeshKnot(<span class="hljs-keyword">float</span> radius, <span class="hljs-keyword">float</span> size, <span class="hljs-keyword">int</span> radSeg, <span class="hljs-keyword">int</span> sides);                    <span class="hljs-comment">// Generate trefoil knot mesh</span>
    Mesh GenMeshHeightmap(Image heightmap, Vector3 size);                                 <span class="hljs-comment">// Generate heightmap mesh from image data</span>
    Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);                               <span class="hljs-comment">// Generate cubes-based map mesh from image data</span>

    <span class="hljs-comment">// Material loading/unloading functions</span>
    Material *LoadMaterials(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> *materialCount);                    <span class="hljs-comment">// Load materials from model file</span>
    Material LoadMaterialDefault(<span class="hljs-keyword">void</span>);                                                   <span class="hljs-comment">// Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)</span>
    <span class="hljs-keyword">bool</span> IsMaterialValid(Material material);                                              <span class="hljs-comment">// Check if a material is valid (shader assigned, map textures loaded in GPU)</span>
    <span class="hljs-keyword">void</span> UnloadMaterial(Material material);                                               <span class="hljs-comment">// Unload material from GPU memory (VRAM)</span>
    <span class="hljs-keyword">void</span> SetMaterialTexture(Material *material, <span class="hljs-keyword">int</span> mapType, Texture2D texture);          <span class="hljs-comment">// Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)</span>
    <span class="hljs-keyword">void</span> SetModelMeshMaterial(Model *model, <span class="hljs-keyword">int</span> meshId, <span class="hljs-keyword">int</span> materialId);                  <span class="hljs-comment">// Set material for a mesh</span>

    <span class="hljs-comment">// Model animations loading/unloading functions</span>
    ModelAnimation *LoadModelAnimations(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName, <span class="hljs-keyword">int</span> *animCount);            <span class="hljs-comment">// Load model animations from file</span>
    <span class="hljs-keyword">void</span> UpdateModelAnimation(Model model, ModelAnimation anim, <span class="hljs-keyword">int</span> frame);               <span class="hljs-comment">// Update model animation pose (CPU)</span>
    <span class="hljs-keyword">void</span> UpdateModelAnimationBones(Model model, ModelAnimation anim, <span class="hljs-keyword">int</span> frame);          <span class="hljs-comment">// Update model animation mesh bone matrices (GPU skinning)</span>
    <span class="hljs-keyword">void</span> UnloadModelAnimation(ModelAnimation anim);                                       <span class="hljs-comment">// Unload animation data</span>
    <span class="hljs-keyword">void</span> UnloadModelAnimations(ModelAnimation *animations, <span class="hljs-keyword">int</span> animCount);                <span class="hljs-comment">// Unload animation array data</span>
    <span class="hljs-keyword">bool</span> IsModelAnimationValid(Model model, ModelAnimation anim);                         <span class="hljs-comment">// Check model animation skeleton match</span>

    <span class="hljs-comment">// Collision detection functions</span>
    <span class="hljs-keyword">bool</span> CheckCollisionSpheres(Vector3 center1, <span class="hljs-keyword">float</span> radius1, Vector3 center2, <span class="hljs-keyword">float</span> radius2);   <span class="hljs-comment">// Check collision between two spheres</span>
    <span class="hljs-keyword">bool</span> CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);                                 <span class="hljs-comment">// Check collision between two bounding boxes</span>
    <span class="hljs-keyword">bool</span> CheckCollisionBoxSphere(BoundingBox box, Vector3 center, <span class="hljs-keyword">float</span> radius);                  <span class="hljs-comment">// Check collision between box and sphere</span>
    RayCollision GetRayCollisionSphere(Ray ray, Vector3 center, <span class="hljs-keyword">float</span> radius);                    <span class="hljs-comment">// Get collision info between ray and sphere</span>
    RayCollision GetRayCollisionBox(Ray ray, BoundingBox box);                                    <span class="hljs-comment">// Get collision info between ray and box</span>
    RayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform);                       <span class="hljs-comment">// Get collision info between ray and mesh</span>
    RayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);            <span class="hljs-comment">// Get collision info between ray and triangle</span>
    RayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);    <span class="hljs-comment">// Get collision info between ray and quad</span>

</code></pre></div>
            <p id="paudio">module: raudio <a href="#paudio">→</a></p>
            <div id="audio"><pre><code class="cpp hljs ">
    <span class="hljs-comment">// Audio device management functions</span>
    <span class="hljs-keyword">void</span> InitAudioDevice(<span class="hljs-keyword">void</span>);                                     <span class="hljs-comment">// Initialize audio device and context</span>
    <span class="hljs-keyword">void</span> CloseAudioDevice(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Close the audio device and context</span>
    <span class="hljs-keyword">bool</span> IsAudioDeviceReady(<span class="hljs-keyword">void</span>);                                  <span class="hljs-comment">// Check if audio device has been initialized successfully</span>
    <span class="hljs-keyword">void</span> SetMasterVolume(<span class="hljs-keyword">float</span> volume);                             <span class="hljs-comment">// Set master volume (listener)</span>
    <span class="hljs-keyword">float</span> GetMasterVolume(<span class="hljs-keyword">void</span>);                                    <span class="hljs-comment">// Get master volume (listener)</span>

    <span class="hljs-comment">// Wave/Sound loading/unloading functions</span>
    Wave LoadWave(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                            <span class="hljs-comment">// Load wave data from file</span>
    Wave LoadWaveFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fileData, <span class="hljs-keyword">int</span> dataSize); <span class="hljs-comment">// Load wave from memory buffer, fileType refers to extension: i.e. '.wav'</span>
    <span class="hljs-keyword">bool</span> IsWaveValid(Wave wave);                                    <span class="hljs-comment">// Checks if wave data is valid (data loaded and parameters)</span>
    Sound LoadSound(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                          <span class="hljs-comment">// Load sound from file</span>
    Sound LoadSoundFromWave(Wave wave);                             <span class="hljs-comment">// Load sound from wave data</span>
    Sound LoadSoundAlias(Sound source);                             <span class="hljs-comment">// Create a new sound that shares the same sample data as the source sound, does not own the sound data</span>
    <span class="hljs-keyword">bool</span> IsSoundValid(Sound sound);                                 <span class="hljs-comment">// Checks if a sound is valid (data loaded and buffers initialized)</span>
    <span class="hljs-keyword">void</span> UpdateSound(Sound sound, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *data, <span class="hljs-keyword">int</span> sampleCount); <span class="hljs-comment">// Update sound buffer with new data</span>
    <span class="hljs-keyword">void</span> UnloadWave(Wave wave);                                     <span class="hljs-comment">// Unload wave data</span>
    <span class="hljs-keyword">void</span> UnloadSound(Sound sound);                                  <span class="hljs-comment">// Unload sound</span>
    <span class="hljs-keyword">void</span> UnloadSoundAlias(Sound alias);                             <span class="hljs-comment">// Unload a sound alias (does not deallocate sample data)</span>
    <span class="hljs-keyword">bool</span> ExportWave(Wave wave, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);               <span class="hljs-comment">// Export wave data to file, returns true on success</span>
    <span class="hljs-keyword">bool</span> ExportWaveAsCode(Wave wave, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);         <span class="hljs-comment">// Export wave sample data to code (.h), returns true on success</span>

    <span class="hljs-comment">// Wave/Sound management functions</span>
    <span class="hljs-keyword">void</span> PlaySound(Sound sound);                                    <span class="hljs-comment">// Play a sound</span>
    <span class="hljs-keyword">void</span> StopSound(Sound sound);                                    <span class="hljs-comment">// Stop playing a sound</span>
    <span class="hljs-keyword">void</span> PauseSound(Sound sound);                                   <span class="hljs-comment">// Pause a sound</span>
    <span class="hljs-keyword">void</span> ResumeSound(Sound sound);                                  <span class="hljs-comment">// Resume a paused sound</span>
    <span class="hljs-keyword">bool</span> IsSoundPlaying(Sound sound);                               <span class="hljs-comment">// Check if a sound is currently playing</span>
    <span class="hljs-keyword">void</span> SetSoundVolume(Sound sound, <span class="hljs-keyword">float</span> volume);                 <span class="hljs-comment">// Set volume for a sound (1.0 is max level)</span>
    <span class="hljs-keyword">void</span> SetSoundPitch(Sound sound, <span class="hljs-keyword">float</span> pitch);                   <span class="hljs-comment">// Set pitch for a sound (1.0 is base level)</span>
    <span class="hljs-keyword">void</span> SetSoundPan(Sound sound, <span class="hljs-keyword">float</span> pan);                       <span class="hljs-comment">// Set pan for a sound (0.5 is center)</span>
    Wave WaveCopy(Wave wave);                                       <span class="hljs-comment">// Copy a wave to a new wave</span>
    <span class="hljs-keyword">void</span> WaveCrop(Wave *wave, <span class="hljs-keyword">int</span> initFrame, <span class="hljs-keyword">int</span> finalFrame);       <span class="hljs-comment">// Crop a wave to defined frames range</span>
    <span class="hljs-keyword">void</span> WaveFormat(Wave *wave, <span class="hljs-keyword">int</span> sampleRate, <span class="hljs-keyword">int</span> sampleSize, <span class="hljs-keyword">int</span> channels); <span class="hljs-comment">// Convert wave data to desired format</span>
    <span class="hljs-keyword">float</span> *LoadWaveSamples(Wave wave);                              <span class="hljs-comment">// Load samples data from wave as a 32bit float data array</span>
    <span class="hljs-keyword">void</span> UnloadWaveSamples(<span class="hljs-keyword">float</span> *samples);                         <span class="hljs-comment">// Unload samples data loaded with LoadWaveSamples()</span>

    <span class="hljs-comment">// Music management functions</span>
    Music LoadMusicStream(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileName);                    <span class="hljs-comment">// Load music stream from file</span>
    Music LoadMusicStreamFromMemory(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *fileType, <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data, <span class="hljs-keyword">int</span> dataSize); <span class="hljs-comment">// Load music stream from data</span>
    <span class="hljs-keyword">bool</span> IsMusicValid(Music music);                                 <span class="hljs-comment">// Checks if a music stream is valid (context and buffers initialized)</span>
    <span class="hljs-keyword">void</span> UnloadMusicStream(Music music);                            <span class="hljs-comment">// Unload music stream</span>
    <span class="hljs-keyword">void</span> PlayMusicStream(Music music);                              <span class="hljs-comment">// Start music playing</span>
    <span class="hljs-keyword">bool</span> IsMusicStreamPlaying(Music music);                         <span class="hljs-comment">// Check if music is playing</span>
    <span class="hljs-keyword">void</span> UpdateMusicStream(Music music);                            <span class="hljs-comment">// Updates buffers for music streaming</span>
    <span class="hljs-keyword">void</span> StopMusicStream(Music music);                              <span class="hljs-comment">// Stop music playing</span>
    <span class="hljs-keyword">void</span> PauseMusicStream(Music music);                             <span class="hljs-comment">// Pause music playing</span>
    <span class="hljs-keyword">void</span> ResumeMusicStream(Music music);                            <span class="hljs-comment">// Resume playing paused music</span>
    <span class="hljs-keyword">void</span> SeekMusicStream(Music music, <span class="hljs-keyword">float</span> position);              <span class="hljs-comment">// Seek music to a position (in seconds)</span>
    <span class="hljs-keyword">void</span> SetMusicVolume(Music music, <span class="hljs-keyword">float</span> volume);                 <span class="hljs-comment">// Set volume for music (1.0 is max level)</span>
    <span class="hljs-keyword">void</span> SetMusicPitch(Music music, <span class="hljs-keyword">float</span> pitch);                   <span class="hljs-comment">// Set pitch for a music (1.0 is base level)</span>
    <span class="hljs-keyword">void</span> SetMusicPan(Music music, <span class="hljs-keyword">float</span> pan);                       <span class="hljs-comment">// Set pan for a music (0.5 is center)</span>
    <span class="hljs-keyword">float</span> GetMusicTimeLength(Music music);                          <span class="hljs-comment">// Get music time length (in seconds)</span>
    <span class="hljs-keyword">float</span> GetMusicTimePlayed(Music music);                          <span class="hljs-comment">// Get current music time played (in seconds)</span>

    <span class="hljs-comment">// AudioStream management functions</span>
    AudioStream LoadAudioStream(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> sampleRate, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> sampleSize, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> channels); <span class="hljs-comment">// Load audio stream (to stream raw audio pcm data)</span>
    <span class="hljs-keyword">bool</span> IsAudioStreamValid(AudioStream stream);                    <span class="hljs-comment">// Checks if an audio stream is valid (buffers initialized)</span>
    <span class="hljs-keyword">void</span> UnloadAudioStream(AudioStream stream);                     <span class="hljs-comment">// Unload audio stream and free memory</span>
    <span class="hljs-keyword">void</span> UpdateAudioStream(AudioStream stream, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *data, <span class="hljs-keyword">int</span> frameCount); <span class="hljs-comment">// Update audio stream buffers with data</span>
    <span class="hljs-keyword">bool</span> IsAudioStreamProcessed(AudioStream stream);                <span class="hljs-comment">// Check if any audio stream buffers requires refill</span>
    <span class="hljs-keyword">void</span> PlayAudioStream(AudioStream stream);                       <span class="hljs-comment">// Play audio stream</span>
    <span class="hljs-keyword">void</span> PauseAudioStream(AudioStream stream);                      <span class="hljs-comment">// Pause audio stream</span>
    <span class="hljs-keyword">void</span> ResumeAudioStream(AudioStream stream);                     <span class="hljs-comment">// Resume audio stream</span>
    <span class="hljs-keyword">bool</span> IsAudioStreamPlaying(AudioStream stream);                  <span class="hljs-comment">// Check if audio stream is playing</span>
    <span class="hljs-keyword">void</span> StopAudioStream(AudioStream stream);                       <span class="hljs-comment">// Stop audio stream</span>
    <span class="hljs-keyword">void</span> SetAudioStreamVolume(AudioStream stream, <span class="hljs-keyword">float</span> volume);    <span class="hljs-comment">// Set volume for audio stream (1.0 is max level)</span>
    <span class="hljs-keyword">void</span> SetAudioStreamPitch(AudioStream stream, <span class="hljs-keyword">float</span> pitch);      <span class="hljs-comment">// Set pitch for audio stream (1.0 is base level)</span>
    <span class="hljs-keyword">void</span> SetAudioStreamPan(AudioStream stream, <span class="hljs-keyword">float</span> pan);          <span class="hljs-comment">// Set pan for audio stream (0.5 is centered)</span>
    <span class="hljs-keyword">void</span> SetAudioStreamBufferSizeDefault(<span class="hljs-keyword">int</span> size);                 <span class="hljs-comment">// Default size for new audio streams</span>
    <span class="hljs-keyword">void</span> SetAudioStreamCallback(AudioStream stream, AudioCallback callback); <span class="hljs-comment">// Audio thread callback to request new data</span>

    <span class="hljs-keyword">void</span> AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor); <span class="hljs-comment">// Attach audio stream processor to stream, receives the samples as 'float'</span>
    <span class="hljs-keyword">void</span> DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor); <span class="hljs-comment">// Detach audio stream processor from stream</span>

    <span class="hljs-keyword">void</span> AttachAudioMixedProcessor(AudioCallback processor); <span class="hljs-comment">// Attach audio stream processor to the entire audio pipeline, receives the samples as 'float'</span>
    <span class="hljs-keyword">void</span> DetachAudioMixedProcessor(AudioCallback processor); <span class="hljs-comment">// Detach audio stream processor from the entire audio pipeline</span>

</code></pre></div>

            <div id="fullgroup">
                <div class="leftgroup">
                    <p id="pstructs">structs</p>
                    <div id="structs"><pre><code class="cpp hljs ">    <span class="hljs-keyword">struct</span> Vector2;                <span class="hljs-comment">// Vector2, 2 components</span>
    <span class="hljs-keyword">struct</span> Vector3;                <span class="hljs-comment">// Vector3, 3 components</span>
    <span class="hljs-keyword">struct</span> Vector4;                <span class="hljs-comment">// Vector4, 4 components</span>
    <span class="hljs-keyword">struct</span> Matrix;                 <span class="hljs-comment">// Matrix, 4x4 components, column major, OpenGL style, right handed</span>
    <span class="hljs-keyword">struct</span> Color;                  <span class="hljs-comment">// Color, 4 components, R8G8B8A8 (32bit)</span>
    <span class="hljs-keyword">struct</span> Rectangle;              <span class="hljs-comment">// Rectangle, 4 components</span>

    <span class="hljs-keyword">struct</span> Image;                  <span class="hljs-comment">// Image, pixel data stored in CPU memory (RAM)</span>
    <span class="hljs-keyword">struct</span> Texture;                <span class="hljs-comment">// Texture, tex data stored in GPU memory (VRAM)</span>
    <span class="hljs-keyword">struct</span> RenderTexture;          <span class="hljs-comment">// RenderTexture, fbo for texture rendering</span>
    <span class="hljs-keyword">struct</span> NPatchInfo;             <span class="hljs-comment">// NPatchInfo, n-patch layout info</span>
    <span class="hljs-keyword">struct</span> GlyphInfo;              <span class="hljs-comment">// GlyphInfo, font characters glyphs info</span>
    <span class="hljs-keyword">struct</span> Font;                   <span class="hljs-comment">// Font, font texture and GlyphInfo array data</span>

    <span class="hljs-keyword">struct</span> Camera2D;               <span class="hljs-comment">// Camera2D, defines position/orientation in 2d space</span>
    <span class="hljs-keyword">struct</span> Camera3D;               <span class="hljs-comment">// Camera, defines position/orientation in 3d space</span>

    <span class="hljs-keyword">struct</span> Shader;                 <span class="hljs-comment">// Shader</span>
    <span class="hljs-keyword">struct</span> MaterialMap;            <span class="hljs-comment">// MaterialMap</span>
    <span class="hljs-keyword">struct</span> Material;               <span class="hljs-comment">// Material, includes shader and maps</span>
    <span class="hljs-keyword">struct</span> Mesh;                   <span class="hljs-comment">// Mesh, vertex data and vao/vbo</span>
    <span class="hljs-keyword">struct</span> Model;                  <span class="hljs-comment">// Model, meshes, materials and animation data</span>
    <span class="hljs-keyword">struct</span> ModelAnimation;         <span class="hljs-comment">// ModelAnimation</span>
    <span class="hljs-keyword">struct</span> Transform;              <span class="hljs-comment">// Transform, vertex transformation data</span>
    <span class="hljs-keyword">struct</span> BoneInfo;               <span class="hljs-comment">// Bone, skeletal animation bone</span>
    <span class="hljs-keyword">struct</span> Ray;                    <span class="hljs-comment">// Ray, ray for raycasting</span>
    <span class="hljs-keyword">struct</span> RayCollision;           <span class="hljs-comment">// RayCollision, ray hit information</span>
    <span class="hljs-keyword">struct</span> BoundingBox;            <span class="hljs-comment">// BoundingBox</span>

    <span class="hljs-keyword">struct</span> Wave;                   <span class="hljs-comment">// Wave, audio wave data</span>
    <span class="hljs-keyword">struct</span> AudioStream;            <span class="hljs-comment">// AudioStream, custom audio stream</span>
    <span class="hljs-keyword">struct</span> Sound;                  <span class="hljs-comment">// Sound</span>
    <span class="hljs-keyword">struct</span> Music;                  <span class="hljs-comment">// Music, audio stream, anything longer than ~10 seconds should be streamed</span>

    <span class="hljs-keyword">struct</span> VrDeviceInfo;           <span class="hljs-comment">// VrDeviceInfo, Head-Mounted-Display device parameters</span>
    <span class="hljs-keyword">struct</span> VrStereoConfig;         <span class="hljs-comment">// VrStereoConfig, VR stereo rendering configuration for simulator</span>

    <span class="hljs-keyword">struct</span> FilePathList;           <span class="hljs-comment">// File path list</span>

    <span class="hljs-keyword">struct</span> AutomationEvent;        <span class="hljs-comment">// Automation event</span>
    <span class="hljs-keyword">struct</span> AutomationEventList;    <span class="hljs-comment">// Automation event list</span>
</code></pre></div>
                </div>
                <div class="rightgroup">
                    <p id="pcolors">colors</p>
                    <div id="colors"><pre><code class="cpp hljs ">    <span class="hljs-comment">// Custom raylib color palette for amazing visuals on WHITE background</span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> LIGHTGRAY  (Color){ 200, 200, 200, 255 }   <span class="hljs-comment">// Light Gray</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GRAY       (Color){ 130, 130, 130, 255 }   <span class="hljs-comment">// Gray</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> DARKGRAY   (Color){ 80, 80, 80, 255 }      <span class="hljs-comment">// Dark Gray</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> YELLOW     (Color){ 253, 249, 0, 255 }     <span class="hljs-comment">// Yellow</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GOLD       (Color){ 255, 203, 0, 255 }     <span class="hljs-comment">// Gold</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> ORANGE     (Color){ 255, 161, 0, 255 }     <span class="hljs-comment">// Orange</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> PINK       (Color){ 255, 109, 194, 255 }   <span class="hljs-comment">// Pink</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> RED        (Color){ 230, 41, 55, 255 }     <span class="hljs-comment">// Red</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> MAROON     (Color){ 190, 33, 55, 255 }     <span class="hljs-comment">// Maroon</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> GREEN      (Color){ 0, 228, 48, 255 }      <span class="hljs-comment">// Green</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> LIME       (Color){ 0, 158, 47, 255 }      <span class="hljs-comment">// Lime</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> DARKGREEN  (Color){ 0, 117, 44, 255 }      <span class="hljs-comment">// Dark Green</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> SKYBLUE    (Color){ 102, 191, 255, 255 }   <span class="hljs-comment">// Sky Blue</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> BLUE       (Color){ 0, 121, 241, 255 }     <span class="hljs-comment">// Blue</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> DARKBLUE   (Color){ 0, 82, 172, 255 }      <span class="hljs-comment">// Dark Blue</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> PURPLE     (Color){ 200, 122, 255, 255 }   <span class="hljs-comment">// Purple</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> VIOLET     (Color){ 135, 60, 190, 255 }    <span class="hljs-comment">// Violet</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> DARKPURPLE (Color){ 112, 31, 126, 255 }    <span class="hljs-comment">// Dark Purple</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> BEIGE      (Color){ 211, 176, 131, 255 }   <span class="hljs-comment">// Beige</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> BROWN      (Color){ 127, 106, 79, 255 }    <span class="hljs-comment">// Brown</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> DARKBROWN  (Color){ 76, 63, 47, 255 }      <span class="hljs-comment">// Dark Brown</span></span>

    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> WHITE      (Color){ 255, 255, 255, 255 }   <span class="hljs-comment">// White</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> BLACK      (Color){ 0, 0, 0, 255 }         <span class="hljs-comment">// Black</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> BLANK      (Color){ 0, 0, 0, 0 }           <span class="hljs-comment">// Blank (Transparent)</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> MAGENTA    (Color){ 255, 0, 255, 255 }     <span class="hljs-comment">// Magenta</span></span>
    <span class="hljs-preprocessor">#<span class="hljs-keyword">define</span> RAYWHITE   (Color){ 245, 245, 245, 255 }   <span class="hljs-comment">// My own White (raylib logo)</span></span>
</code></pre></div>
                </div>
            </div>

            <p>Other cheatsheets</p>
            <ul>
                <li>
                    <a href="https://www.raylib.com/cheatsheet/raymath_cheatsheet.html">raymath cheatsheet</a>
                </li>
            </ul>

            <div id="copyright">
                <p>raylib quick reference card - Copyright (c) 2013-2024 Ramon Santamaria (<a href="https://www.twitter.com/raysan5">@raysan5</a>)</p>
            </div>
        </div>
    

</body></html>